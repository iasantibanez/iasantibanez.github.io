{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.3", "generated_at": "2022-04-20T05:21:00.440352Z", "invocation_id": "455167bd-ad64-47b1-93a5-a94f80d9e79e", "env": {}, "project_id": "1b762dd680b567002d7cabc78313a399", "user_id": "15030905-e676-454b-83a9-b922426b2d7c", "send_anonymous_usage_stats": true, "adapter_type": "redshift"}, "nodes": {"model.houm.dim_business": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nselect 'Demand' as business, 'DMD' as code, 'Frano' as leader \r\nunion all\r\nselect 'Supply' as business, 'SPY' as code, 'Balut' as leader\r\nunion all \r\nselect 'Customer Experience' as business, 'CX' as code, 'Joaco' as leader\r\nunion all\r\nselect 'Administration' as business, 'ADM' as code, 'Kate' as leader", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_dims", "database": null, "tags": ["dw"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_dims", "fqn": ["houm", "dims", "dim_business"], "unique_id": "model.houm.dim_business", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "dims/dim_business.sql", "original_file_path": "models/dims/dim_business.sql", "name": "dim_business", "alias": "dim_business", "checksum": {"name": "sha256", "checksum": "4ac205d7799d342fc6c0f864670fce2c2e4b37e73fddb8438ec3eccc4ef45fa3"}, "tags": ["dw"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/dims/dim_business.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_dims", "tags": "dw", "materialized": "table"}, "created_at": 1650421548.5907433, "compiled_sql": "\n\nselect 'Demand' as business, 'DMD' as code, 'Frano' as leader \nunion all\nselect 'Supply' as business, 'SPY' as code, 'Balut' as leader\nunion all \nselect 'Customer Experience' as business, 'CX' as code, 'Joaco' as leader\nunion all\nselect 'Administration' as business, 'ADM' as code, 'Kate' as leader", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_dims\".\"dim_business\""}, "model.houm.dim_currency": {"raw_sql": "{{ config(materialized='incremental') }}\r\n\r\nwith usd_etl as (\r\n        SELECT getdate()::timestamp  as etl_time,\r\n                current_date::date as date \r\n                ,'USD' as currency_type\r\n                ,'US Dollar' as currency_name \r\n                ,'United State' as currency_country\r\n                ,'1'::float as value_usd\r\n)\r\n, clp_etl as (\r\n        SELECT getdate()::timestamp as etl_time\r\n            ,  current_date::date as date \r\n            ,'CLP' as currency_type\r\n            ,'Chilean Peso' as currency_name\r\n            ,'Chile' as currency_country\r\n            ,'813.01'::float as value_usd\r\n)\r\n, cop_etl as (\r\n        SELECT getdate()::timestamp as etl_time\r\n            ,current_date::date as date\r\n            ,'COP' as currency_type\r\n            ,'Colombian Peso' as currency_name\r\n            ,'Colombia' as currency_country\r\n            ,'3826.18'::float as value_usd\r\n)\r\nSELECT * FROM usd_etl\r\nUNION ALL\r\nSELECT * FROM clp_etl\r\nUNION ALL\r\nSELECT * FROM cop_etl", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_dims", "database": null, "tags": ["dw"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_dims", "fqn": ["houm", "dims", "dim_currency"], "unique_id": "model.houm.dim_currency", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "dims/dim_currency.sql", "original_file_path": "models/dims/dim_currency.sql", "name": "dim_currency", "alias": "dim_currency", "checksum": {"name": "sha256", "checksum": "383421fddc67e09b62b3c907bc80ee24f31c20988fd632745d781e5e7619a18f"}, "tags": ["dw"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/dims/dim_currency.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_dims", "tags": "dw", "materialized": "incremental"}, "created_at": 1650421548.7817576, "compiled_sql": "\n\nwith usd_etl as (\n        SELECT getdate()::timestamp  as etl_time,\n                current_date::date as date \n                ,'USD' as currency_type\n                ,'US Dollar' as currency_name \n                ,'United State' as currency_country\n                ,'1'::float as value_usd\n)\n, clp_etl as (\n        SELECT getdate()::timestamp as etl_time\n            ,  current_date::date as date \n            ,'CLP' as currency_type\n            ,'Chilean Peso' as currency_name\n            ,'Chile' as currency_country\n            ,'813.01'::float as value_usd\n)\n, cop_etl as (\n        SELECT getdate()::timestamp as etl_time\n            ,current_date::date as date\n            ,'COP' as currency_type\n            ,'Colombian Peso' as currency_name\n            ,'Colombia' as currency_country\n            ,'3826.18'::float as value_usd\n)\nSELECT * FROM usd_etl\nUNION ALL\nSELECT * FROM clp_etl\nUNION ALL\nSELECT * FROM cop_etl", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_dims\".\"dim_currency\""}, "model.houm.dim_dates": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\n\r\n SELECT\r\n    cast(seq + 1 AS INTEGER)                                      AS date_id,\r\n-- DATE\r\n    datum                                                         AS full_date,\r\n    TO_CHAR(datum, 'DD/MM/YYYY') :: CHAR(10)                      AS au_format_date,\r\n    TO_CHAR(datum, 'MM/DD/YYYY') :: CHAR(10)                      AS us_format_date,\r\n-- YEAR\r\n    cast(extract(YEAR FROM datum) AS SMALLINT)                    AS year_number,\r\n    cast(extract(WEEK FROM datum) AS SMALLINT)                    AS year_week_number,\r\n    cast(extract(DOY FROM datum) AS SMALLINT)                     AS year_day_number,\r\n    cast(to_char(datum + INTERVAL '6' MONTH, 'yyyy') AS SMALLINT) AS au_fiscal_year_number,\r\n    cast(to_char(datum + INTERVAL '3' MONTH, 'yyyy') AS SMALLINT) AS us_fiscal_year_number,\r\n-- QUARTER\r\n    cast(to_char(datum, 'Q') AS SMALLINT)                         AS qtr_number,\r\n    cast(to_char(datum + INTERVAL '6' MONTH, 'Q') AS SMALLINT)    AS au_fiscal_qtr_number,\r\n    cast(to_char(datum + INTERVAL '3' MONTH, 'Q') AS SMALLINT)    AS us_fiscal_qtr_number,\r\n-- MONTH\r\n    cast(extract(MONTH FROM datum) AS SMALLINT)                   AS month_number,\r\n    to_char(datum, 'Month')                                       AS month_name,\r\n    cast(extract(DAY FROM datum) AS SMALLINT)                     AS month_day_number,\r\n-- WEEK\r\n    cast(to_char(datum, 'D') AS SMALLINT)                         AS week_day_number,\r\n-- DAY\r\n    to_char(datum, 'Day')                                         AS day_name,\r\n    CASE WHEN to_char(datum, 'D') IN ('1', '7')\r\n      THEN 0\r\n    ELSE 1 END                                                    AS day_is_weekday,\r\n    CASE WHEN\r\n      extract(DAY FROM (datum + (1 - extract(DAY FROM datum)) :: INTEGER +\r\n                        INTERVAL '1' MONTH) :: DATE -\r\n                       INTERVAL '1' DAY) = extract(DAY FROM datum)\r\n      THEN 1\r\n    ELSE 0 END                                                    AS day_is_last_of_month\r\n  FROM\r\n    (\r\n      SELECT\r\n        '2018-01-01' :: DATE + generate_series AS datum,\r\n        generate_series                        AS seq\r\n      FROM generate_series(0, 7 * 365, 1)\r\n    ) DQ\r\n  ORDER BY 1 desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_dims", "database": null, "tags": ["dw"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_dims", "fqn": ["houm", "dims", "dim_dates"], "unique_id": "model.houm.dim_dates", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "dims/dim_dates.sql", "original_file_path": "models/dims/dim_dates.sql", "name": "dim_dates", "alias": "dim_dates", "checksum": {"name": "sha256", "checksum": "ff81a580689617f2dd2e80437c26f12b2f0a906b026c7553ff47506a01d290c1"}, "tags": ["dw"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/dims/dim_dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_dims", "tags": "dw", "materialized": "view"}, "created_at": 1650421548.8214352, "compiled_sql": "\n\n\n SELECT\n    cast(seq + 1 AS INTEGER)                                      AS date_id,\n-- DATE\n    datum                                                         AS full_date,\n    TO_CHAR(datum, 'DD/MM/YYYY') :: CHAR(10)                      AS au_format_date,\n    TO_CHAR(datum, 'MM/DD/YYYY') :: CHAR(10)                      AS us_format_date,\n-- YEAR\n    cast(extract(YEAR FROM datum) AS SMALLINT)                    AS year_number,\n    cast(extract(WEEK FROM datum) AS SMALLINT)                    AS year_week_number,\n    cast(extract(DOY FROM datum) AS SMALLINT)                     AS year_day_number,\n    cast(to_char(datum + INTERVAL '6' MONTH, 'yyyy') AS SMALLINT) AS au_fiscal_year_number,\n    cast(to_char(datum + INTERVAL '3' MONTH, 'yyyy') AS SMALLINT) AS us_fiscal_year_number,\n-- QUARTER\n    cast(to_char(datum, 'Q') AS SMALLINT)                         AS qtr_number,\n    cast(to_char(datum + INTERVAL '6' MONTH, 'Q') AS SMALLINT)    AS au_fiscal_qtr_number,\n    cast(to_char(datum + INTERVAL '3' MONTH, 'Q') AS SMALLINT)    AS us_fiscal_qtr_number,\n-- MONTH\n    cast(extract(MONTH FROM datum) AS SMALLINT)                   AS month_number,\n    to_char(datum, 'Month')                                       AS month_name,\n    cast(extract(DAY FROM datum) AS SMALLINT)                     AS month_day_number,\n-- WEEK\n    cast(to_char(datum, 'D') AS SMALLINT)                         AS week_day_number,\n-- DAY\n    to_char(datum, 'Day')                                         AS day_name,\n    CASE WHEN to_char(datum, 'D') IN ('1', '7')\n      THEN 0\n    ELSE 1 END                                                    AS day_is_weekday,\n    CASE WHEN\n      extract(DAY FROM (datum + (1 - extract(DAY FROM datum)) :: INTEGER +\n                        INTERVAL '1' MONTH) :: DATE -\n                       INTERVAL '1' DAY) = extract(DAY FROM datum)\n      THEN 1\n    ELSE 0 END                                                    AS day_is_last_of_month\n  FROM\n    (\n      SELECT\n        '2018-01-01' :: DATE + generate_series AS datum,\n        generate_series                        AS seq\n      FROM generate_series(0, 7 * 365, 1)\n    ) DQ\n  ORDER BY 1 desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_dims\".\"dim_dates\""}, "model.houm.dim_locations": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nSELECT  \r\n        id,\r\n        created_at,\r\n        updated_at,\r\n        macrozone,\r\n        city,\r\n        region,\r\n        country,\r\n        description,\r\n        granularity,\r\n        polygon\r\nFROM {{ source('public', 'dim_polygons') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.public.dim_polygons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_dims", "database": null, "tags": ["dw"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_dims", "fqn": ["houm", "dims", "dim_locations"], "unique_id": "model.houm.dim_locations", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "dims/dim_locations.sql", "original_file_path": "models/dims/dim_locations.sql", "name": "dim_locations", "alias": "dim_locations", "checksum": {"name": "sha256", "checksum": "18addb582786d064e0b3f85ff42e8c3dab011dd6c8a38cf1308694217a2fe426"}, "tags": ["dw"], "refs": [], "sources": [["public", "dim_polygons"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/dims/dim_locations.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_dims", "tags": "dw", "materialized": "table"}, "created_at": 1650421548.8647606, "compiled_sql": "\n\nSELECT  \n        id,\n        created_at,\n        updated_at,\n        macrozone,\n        city,\n        region,\n        country,\n        description,\n        granularity,\n        polygon\nFROM \"houmdw_prod\".\"public\".\"dim_polygons\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_dims\".\"dim_locations\""}, "model.houm.dim_macrozones": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nSELECT id,\r\n        created_at,\r\n        updated_at,\r\n        name,\r\n        description,\r\n        country,\r\n        polygon,\r\n        city,\r\n        city_marketplace_id,\r\n        timezone\r\nFROM {{ source('historical', 'historical_scheduler_macrozone') }}\r\nWHERE audit_end_dt IS NULL \r\nAND audit_action <> 'D'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.historical.historical_scheduler_macrozone"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_dims", "database": null, "tags": ["dw"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_dims", "fqn": ["houm", "dims", "dim_macrozones"], "unique_id": "model.houm.dim_macrozones", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "dims/dim_macrozones.sql", "original_file_path": "models/dims/dim_macrozones.sql", "name": "dim_macrozones", "alias": "dim_macrozones", "checksum": {"name": "sha256", "checksum": "f4605f7ffe7fb2083ca543c3903713e462fd978519abcad8bd0aeae80e4e34ad"}, "tags": ["dw"], "refs": [], "sources": [["historical", "historical_scheduler_macrozone"]], "description": "", "columns": {"macrozone": {"name": "macrozone", "description": "This is operational name of a polygon at Houm", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "houm://models/dims/schema.yml", "compiled_path": "target/compiled/houm/models/dims/dim_macrozones.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_dims", "tags": "dw", "materialized": "table"}, "created_at": 1650421551.1431866, "compiled_sql": "\n\nSELECT id,\n        created_at,\n        updated_at,\n        name,\n        description,\n        country,\n        polygon,\n        city,\n        city_marketplace_id,\n        timezone\nFROM \"houmdw_prod\".\"historical\".\"historical_scheduler_macrozone\"\nWHERE audit_end_dt IS NULL \nAND audit_action <> 'D'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_dims\".\"dim_macrozones\""}, "model.houm.dim_properties": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nSELECT \r\n        a.id as property_id \r\n        ,b.status as rental_status\r\n        ,c.status as sales_status\r\n        ,a.*\r\nFROM {{ ref('proc_properties') }} a\r\nleft join {{ ref('proc_propertydetails') }} b on a.id = b.property_id \r\nleft join {{ ref('proc_property_salesdetails') }} c on a.id = c.property_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.houm.proc_properties", "model.houm.proc_propertydetails", "model.houm.proc_property_salesdetails"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_dims", "database": null, "tags": ["dw"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_dims", "fqn": ["houm", "dims", "dim_properties"], "unique_id": "model.houm.dim_properties", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "dims/dim_properties.sql", "original_file_path": "models/dims/dim_properties.sql", "name": "dim_properties", "alias": "dim_properties", "checksum": {"name": "sha256", "checksum": "9b4b06890a7b2da5f9a4594d11b30f141a01610acc2f20c839e61a9c7f3ec9da"}, "tags": ["dw"], "refs": [["proc_properties"], ["proc_propertydetails"], ["proc_property_salesdetails"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/dims/dim_properties.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_dims", "tags": "dw", "materialized": "table"}, "created_at": 1650421548.971715, "compiled_sql": "\n\nSELECT \n        a.id as property_id \n        ,b.status as rental_status\n        ,c.status as sales_status\n        ,a.*\nFROM \"houmdw_prod\".\"dbt_processing\".\"proc_properties\" a\nleft join \"houmdw_prod\".\"dbt_processing\".\"proc_propertydetails\" b on a.id = b.property_id \nleft join \"houmdw_prod\".\"dbt_processing\".\"proc_property_salesdetails\" c on a.id = c.property_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_dims\".\"dim_properties\""}, "model.houm.cum_rentals_units": {"raw_sql": "SELECT\n    'rentals_transactions' as metric,\n    'acc_units' as col,\n    country,\n    date_month,\n    SUM(total) over (\n        PARTITION BY country\n        ORDER BY\n            date_month rows unbounded preceding\n    ) AS cum_total\nFROM\n    {{ ref('rentals_units') }}\nWHERE date_month >= concat(extract(year from current_date),'-01-01')\nORDER BY\n    country,\n    date_month", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.houm.rentals_units"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "marts", "core", "finance", "cum_rentals_units"], "unique_id": "model.houm.cum_rentals_units", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "marts/core/finance/cum_rentals_units.sql", "original_file_path": "models/marts/core/finance/cum_rentals_units.sql", "name": "cum_rentals_units", "alias": "cum_rentals_units", "checksum": {"name": "sha256", "checksum": "b57592818d6920d917a5a7d191773833f0052a04488fe59b114871f3b3c303d0"}, "tags": [], "refs": [["rentals_units"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/marts/core/finance/cum_rentals_units.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421549.002861, "compiled_sql": "SELECT\n    'rentals_transactions' as metric,\n    'acc_units' as col,\n    country,\n    date_month,\n    SUM(total) over (\n        PARTITION BY country\n        ORDER BY\n            date_month rows unbounded preceding\n    ) AS cum_total\nFROM\n    \"houmdw_prod\".\"processing_finance\".\"rentals_units\"\nWHERE date_month >= concat(extract(year from current_date),'-01-01')\nORDER BY\n    country,\n    date_month", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"analytics\".\"cum_rentals_units\""}, "model.houm.cum_sales_local_revenue": {"raw_sql": "SELECT\n    'sales_transactions' as metric,\n    'acc_local_revenue' as col,\n    country,\n    date_month,\n    SUM(amount) over (\n        PARTITION BY country\n        ORDER BY\n            date_month rows unbounded preceding\n    ) AS cum_amount\nFROM\n    {{ ref('sales_local_revenue') }}\nWHERE date_month >= concat(extract(year from current_date),'-01-01')\nORDER BY\n    country,\n    date_month", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.houm.sales_local_revenue"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "marts", "core", "finance", "cum_sales_local_revenue"], "unique_id": "model.houm.cum_sales_local_revenue", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "marts/core/finance/cum_sales_local_revenue.sql", "original_file_path": "models/marts/core/finance/cum_sales_local_revenue.sql", "name": "cum_sales_local_revenue", "alias": "cum_sales_local_revenue", "checksum": {"name": "sha256", "checksum": "a394ed7fc2202cccf0378864df609e448a6a6cebad9c23c559de6d86bb4de73c"}, "tags": [], "refs": [["sales_local_revenue"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/marts/core/finance/cum_sales_local_revenue.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421549.0309923, "compiled_sql": "SELECT\n    'sales_transactions' as metric,\n    'acc_local_revenue' as col,\n    country,\n    date_month,\n    SUM(amount) over (\n        PARTITION BY country\n        ORDER BY\n            date_month rows unbounded preceding\n    ) AS cum_amount\nFROM\n    \"houmdw_prod\".\"processing_finance\".\"sales_local_revenue\"\nWHERE date_month >= concat(extract(year from current_date),'-01-01')\nORDER BY\n    country,\n    date_month", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"analytics\".\"cum_sales_local_revenue\""}, "model.houm.cum_sales_units": {"raw_sql": "SELECT\n    'sales_transactions' as metric,\n    'acc_units' as col,\n    country,\n    date_month,\n    SUM(total) over (\n        PARTITION BY country\n        ORDER BY\n            date_month rows unbounded preceding\n    ) AS cum_total\nFROM\n    {{ ref('sales_units') }}\nWHERE date_month >= concat(extract(year from current_date),'-01-01')\nORDER BY\n    country,\n    date_month", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.houm.sales_units"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "marts", "core", "finance", "cum_sales_units"], "unique_id": "model.houm.cum_sales_units", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "marts/core/finance/cum_sales_units.sql", "original_file_path": "models/marts/core/finance/cum_sales_units.sql", "name": "cum_sales_units", "alias": "cum_sales_units", "checksum": {"name": "sha256", "checksum": "84a8f919c91fb3b354ac880eb7ef3c42870af9a1de67d62bc7508d944e5e9a00"}, "tags": [], "refs": [["sales_units"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/marts/core/finance/cum_sales_units.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421549.0564597, "compiled_sql": "SELECT\n    'sales_transactions' as metric,\n    'acc_units' as col,\n    country,\n    date_month,\n    SUM(total) over (\n        PARTITION BY country\n        ORDER BY\n            date_month rows unbounded preceding\n    ) AS cum_total\nFROM\n    \"houmdw_prod\".\"processing_finance\".\"sales_units\"\nWHERE date_month >= concat(extract(year from current_date),'-01-01')\nORDER BY\n    country,\n    date_month", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"analytics\".\"cum_sales_units\""}, "model.houm.goals_current": {"raw_sql": "WITH GoalsCurrent AS (\nSELECT *\nFROM {{ ref('rentals_units') }}\nUNION ALL\nSELECT *\nFROM {{ ref('sales_units') }}\nUNION ALL\nSELECT *\nFROM {{ref('sales_local_revenue')}}\nUNION ALL\nSELECT *\nFROM {{ref('eop_subs')}}\nUNION ALL \nSELECT *\nFROM {{ref('cum_sales_units')}}\nUNION ALL \nSELECT *\nFROM {{ref('cum_rentals_units')}}\nUNION ALL \nSELECT *\nFROM {{ref('cum_sales_local_revenue')}})\n\nSELECT \n/* NO PIVOT IN REDSHIFT */\nSUM(CASE WHEN col = 'units' THEN total END) as units,\nSUM(CASE WHEN col = 'acc_units' THEN total END) as acc_units,\nSUM(CASE WHEN col = 'local_revenue' THEN total END) AS local_revenue,\nSUM(CASE WHEN col = 'acc_local_revenue' THEN total END) AS acc_local_revenue,\nmetric,country,date_month\nFROM GoalsCurrent\nGROUP BY country,metric,date_month", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.houm.rentals_units", "model.houm.sales_units", "model.houm.sales_local_revenue", "model.houm.eop_subs", "model.houm.cum_sales_units", "model.houm.cum_rentals_units", "model.houm.cum_sales_local_revenue"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "marts", "core", "finance", "goals_current"], "unique_id": "model.houm.goals_current", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "marts/core/finance/goals_current.sql", "original_file_path": "models/marts/core/finance/goals_current.sql", "name": "goals_current", "alias": "goals_current", "checksum": {"name": "sha256", "checksum": "23317083206c46e8e8d8c544cb8b431810b4fc08b8b2d17e69dba0915e9b83a4"}, "tags": [], "refs": [["rentals_units"], ["sales_units"], ["sales_local_revenue"], ["eop_subs"], ["cum_sales_units"], ["cum_rentals_units"], ["cum_sales_local_revenue"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/marts/core/finance/goals_current.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421549.0926816, "compiled_sql": "WITH GoalsCurrent AS (\nSELECT *\nFROM \"houmdw_prod\".\"processing_finance\".\"rentals_units\"\nUNION ALL\nSELECT *\nFROM \"houmdw_prod\".\"processing_finance\".\"sales_units\"\nUNION ALL\nSELECT *\nFROM \"houmdw_prod\".\"processing_finance\".\"sales_local_revenue\"\nUNION ALL\nSELECT *\nFROM \"houmdw_prod\".\"processing_finance\".\"eop_subs\"\nUNION ALL \nSELECT *\nFROM \"houmdw_prod\".\"analytics\".\"cum_sales_units\"\nUNION ALL \nSELECT *\nFROM \"houmdw_prod\".\"analytics\".\"cum_rentals_units\"\nUNION ALL \nSELECT *\nFROM \"houmdw_prod\".\"analytics\".\"cum_sales_local_revenue\")\n\nSELECT \n/* NO PIVOT IN REDSHIFT */\nSUM(CASE WHEN col = 'units' THEN total END) as units,\nSUM(CASE WHEN col = 'acc_units' THEN total END) as acc_units,\nSUM(CASE WHEN col = 'local_revenue' THEN total END) AS local_revenue,\nSUM(CASE WHEN col = 'acc_local_revenue' THEN total END) AS acc_local_revenue,\nmetric,country,date_month\nFROM GoalsCurrent\nGROUP BY country,metric,date_month", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"analytics\".\"goals_current\""}, "model.houm.properties_published": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nSELECT \r\n        a.id as property_id\r\n        ,b.status as rental_status\r\n        ,c.status as sales_status\r\n        ,a.*\r\nFROM {{ ref('proc_properties') }} a\r\nleft join {{ ref('proc_propertydetails') }} b on a.id = b.property_id \r\nleft join {{ ref('proc_property_salesdetails') }} c on a.id = c.property_id\r\nwhere b.status in ('published','republished') or c.status in ('published','republished')", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.houm.proc_properties", "model.houm.proc_propertydetails", "model.houm.proc_property_salesdetails"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_marts", "database": null, "tags": ["dw"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_marts", "fqn": ["houm", "marts", "supply", "properties_published"], "unique_id": "model.houm.properties_published", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "marts/supply/properties_published.sql", "original_file_path": "models/marts/supply/properties_published.sql", "name": "properties_published", "alias": "properties_published", "checksum": {"name": "sha256", "checksum": "70d753482cbbc37f43199b3a9d0615c53ac843bb07ad4367f786cd68ebc4ec34"}, "tags": ["dw"], "refs": [["proc_properties"], ["proc_propertydetails"], ["proc_property_salesdetails"]], "sources": [], "description": "", "columns": {"property_id": {"name": "property_id", "description": "This is a unique identifier for the properties at Houm", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "houm://models/marts/schema.yml", "compiled_path": "target/compiled/houm/models/marts/supply/properties_published.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_marts", "tags": "dw", "materialized": "table"}, "created_at": 1650421551.355882, "compiled_sql": "\n\nSELECT \n        a.id as property_id\n        ,b.status as rental_status\n        ,c.status as sales_status\n        ,a.*\nFROM \"houmdw_prod\".\"dbt_processing\".\"proc_properties\" a\nleft join \"houmdw_prod\".\"dbt_processing\".\"proc_propertydetails\" b on a.id = b.property_id \nleft join \"houmdw_prod\".\"dbt_processing\".\"proc_property_salesdetails\" c on a.id = c.property_id\nwhere b.status in ('published','republished') or c.status in ('published','republished')", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_marts\".\"properties_published\""}, "model.houm.eop_subs": {"raw_sql": "SELECT\n    'eop_under_mgmt' AS metric,'units' AS col,administration.subs_bop.country,administration.subs_bop.\"date\",administration.subs_bop.total\nFROM\n    administration.subs_bop", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "processing_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "processing_finance", "fqn": ["houm", "processing", "finance", "eop_subs"], "unique_id": "model.houm.eop_subs", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "processing/finance/eop_subs.sql", "original_file_path": "models/processing/finance/eop_subs.sql", "name": "eop_subs", "alias": "eop_subs", "checksum": {"name": "sha256", "checksum": "15320a10bda8841ec4969ea2a30e886b10a2406b03adee53ae91c6f7cb90c230"}, "tags": [], "refs": [], "sources": [], "description": "Number of subscriptions at the beggining of period", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "houm://models/processing/schema.yml", "compiled_path": "target/compiled/houm/models/processing/finance/eop_subs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "processing_finance"}, "created_at": 1650421551.4131427, "compiled_sql": "SELECT\n    'eop_under_mgmt' AS metric,'units' AS col,administration.subs_bop.country,administration.subs_bop.\"date\",administration.subs_bop.total\nFROM\n    administration.subs_bop", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"processing_finance\".\"eop_subs\""}, "model.houm.rentals_units": {"raw_sql": "WITH subscountry AS (\n    SELECT\n        *\n    FROM\n        historical.historical_subscription_subscription subs\n        INNER JOIN (\n            SELECT\n                *\n            FROM\n                historical.historical_properties\n            WHERE\n                audit_end_dt IS NULL\n        ) properties\n        ON properties.id = subs.property_id\n    WHERE\n        subs.audit_end_dt IS NULL\n        AND payment_date IS NOT NULL AND init_reason IN ('NEW_LEAD','NEW_LEAD_WITHOUT_BROKERAGE','REPUBLISHED','REPUBLISHED_DUE_TO_DEFAULTER_TENANT')\n),\nrentalsunits AS (\n    SELECT\n        country,\n        DATE_TRUNC(\n            'month',\n            payment_date\n        ) :: DATE AS date_month,\n        COUNT(1) AS total\n    FROM\n        subscountry\n    GROUP BY\n        1,\n        2\n)\nSELECT\n    'rentals_transactions' as metric, 'units' as col, *\nFROM\n    rentalsunits", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "processing_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "processing_finance", "fqn": ["houm", "processing", "finance", "rentals_units"], "unique_id": "model.houm.rentals_units", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "processing/finance/rentals_units.sql", "original_file_path": "models/processing/finance/rentals_units.sql", "name": "rentals_units", "alias": "rentals_units", "checksum": {"name": "sha256", "checksum": "333ff51cbfa143e8049a65b50d0bdc18dca1780328be5255e3cb0bf1625e0f09"}, "tags": [], "refs": [], "sources": [], "description": "Number of rented units for each month", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "houm://models/processing/schema.yml", "compiled_path": "target/compiled/houm/models/processing/finance/rentals_units.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "processing_finance"}, "created_at": 1650421551.4181364, "compiled_sql": "WITH subscountry AS (\n    SELECT\n        *\n    FROM\n        historical.historical_subscription_subscription subs\n        INNER JOIN (\n            SELECT\n                *\n            FROM\n                historical.historical_properties\n            WHERE\n                audit_end_dt IS NULL\n        ) properties\n        ON properties.id = subs.property_id\n    WHERE\n        subs.audit_end_dt IS NULL\n        AND payment_date IS NOT NULL AND init_reason IN ('NEW_LEAD','NEW_LEAD_WITHOUT_BROKERAGE','REPUBLISHED','REPUBLISHED_DUE_TO_DEFAULTER_TENANT')\n),\nrentalsunits AS (\n    SELECT\n        country,\n        DATE_TRUNC(\n            'month',\n            payment_date\n        ) :: DATE AS date_month,\n        COUNT(1) AS total\n    FROM\n        subscountry\n    GROUP BY\n        1,\n        2\n)\nSELECT\n    'rentals_transactions' as metric, 'units' as col, *\nFROM\n    rentalsunits", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"processing_finance\".\"rentals_units\""}, "model.houm.sales_local_revenue": {"raw_sql": "WITH localsalesrevenue AS (\n    SELECT\n        country,\n        DATE_TRUNC(\n            'month',\n            promise_date\n        ) :: DATE AS date_month,\n        SUM(\n            local_amount *(\n                sales_revenue.seller_commission + sales_revenue.buyer_commission\n            ) \n        ) as amount\n    FROM\n        payments.sales_revenue\n    GROUP BY\n        2,\n        country\n)\nSELECT\n        'sales_transactions' AS metric,'local_revenue' AS col,*\nFROM\n    localsalesrevenue", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "processing_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "processing_finance", "fqn": ["houm", "processing", "finance", "sales_local_revenue"], "unique_id": "model.houm.sales_local_revenue", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "processing/finance/sales_local_revenue.sql", "original_file_path": "models/processing/finance/sales_local_revenue.sql", "name": "sales_local_revenue", "alias": "sales_local_revenue", "checksum": {"name": "sha256", "checksum": "8d8dbdb65ea95a5275a0aa200687fc26e4e04abbf661ef50285f3b69088f156b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/processing/finance/sales_local_revenue.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "processing_finance"}, "created_at": 1650421549.2206209, "compiled_sql": "WITH localsalesrevenue AS (\n    SELECT\n        country,\n        DATE_TRUNC(\n            'month',\n            promise_date\n        ) :: DATE AS date_month,\n        SUM(\n            local_amount *(\n                sales_revenue.seller_commission + sales_revenue.buyer_commission\n            ) \n        ) as amount\n    FROM\n        payments.sales_revenue\n    GROUP BY\n        2,\n        country\n)\nSELECT\n        'sales_transactions' AS metric,'local_revenue' AS col,*\nFROM\n    localsalesrevenue", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"processing_finance\".\"sales_local_revenue\""}, "model.houm.sales_units": {"raw_sql": "WITH salesunits AS (\n    SELECT\n        country,\n        DATE_TRUNC(\n            'month',\n            promise_date\n        ) :: DATE AS date_month,\n        COUNT(1) AS total\n    FROM\n        payments.sales_revenue\n    GROUP BY\n        2,\n        country\n)\nSELECT\n    'sales_transactions' AS metric,'units' AS col,*\nFROM\n    salesunits", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "processing_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "processing_finance", "fqn": ["houm", "processing", "finance", "sales_units"], "unique_id": "model.houm.sales_units", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "processing/finance/sales_units.sql", "original_file_path": "models/processing/finance/sales_units.sql", "name": "sales_units", "alias": "sales_units", "checksum": {"name": "sha256", "checksum": "9e97d9697020e7b89d68c88e67e49ea425551c0a676d1ab5dc30c14f753632b7"}, "tags": [], "refs": [], "sources": [], "description": "Number of sold units for each month", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "houm://models/processing/schema.yml", "compiled_path": "target/compiled/houm/models/processing/finance/sales_units.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "processing_finance"}, "created_at": 1650421551.4080079, "compiled_sql": "WITH salesunits AS (\n    SELECT\n        country,\n        DATE_TRUNC(\n            'month',\n            promise_date\n        ) :: DATE AS date_month,\n        COUNT(1) AS total\n    FROM\n        payments.sales_revenue\n    GROUP BY\n        2,\n        country\n)\nSELECT\n    'sales_transactions' AS metric,'units' AS col,*\nFROM\n    salesunits", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"processing_finance\".\"sales_units\""}, "model.houm.proc_properties": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nselect a.id\r\n\t\t,a.created_at\r\n\t\t,a.updated_at\r\n\t\t,a.first_publication_date\r\n\t\t,a.last_publication_date\r\n        ,CASE   when for_rental = True and  for_sale = True then 'Rental & Sale'\r\n                        when for_rental = True and for_sale = False then 'Rental'\r\n                        when for_rental = False and for_sale = True then 'Sale'\r\n                        end as business_type\r\n        ,CASE \twhen b.role like 'broker' or b.role like 'property_broker' then 'B2B'\r\n        \t\twhen b.role like 'real_estate_developer' then 'real_estate'\r\n        \t\twhen b.role like 'propietary' then 'B2C'\r\n        \t\telse 'B2C'\r\n        \t\tend as property_type\r\n\t\t,a.neighborhood_id\r\n\t\t,lower(a.address) as address\r\n\t\t,lower(a.second_line_address) as second_line_address\r\n\t\t,a.numero_depto\r\n\t\t,a.apartment_floor\r\n\t\t,a.street_number\r\n\t\t,lower(a.comuna) as comuna\r\n\t\t,a.region\r\n\t\t,a.state\r\n\t\t,a.city\r\n\t\t,a.country\r\n\t\t,a.user_id\r\n\t\t,a.type\r\n\t\t,a.stratus\r\n\t\t,a.lessor_id\r\n\t\t,a.uid\r\n\t\t,a.is_deleted\r\n\t\t,a.keys_info\r\n\t\t,a.lost\r\n\t\t,a.lost_reason\r\n\t\t,a.property_relation\r\n\t\t,a.available_from\r\n\t\t,a.pipedrive_owner_id\r\n\t\t,a.antiquity\r\n\t\t,a.year_built\r\n\t\t,a.for_rental\r\n\t\t,a.for_sale\r\n\t\t,a.lessor_brokerage_commission\r\nfrom {{ ref('stg_properties') }} a\r\nleft join {{ ref('stg_users') }} b on a.user_id = b.id  \r\norder by created_at desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.houm.stg_properties", "model.houm.stg_users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_processing", "database": null, "tags": ["dw"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_processing", "fqn": ["houm", "processing", "supply", "proc_properties"], "unique_id": "model.houm.proc_properties", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "processing/supply/proc_properties.sql", "original_file_path": "models/processing/supply/proc_properties.sql", "name": "proc_properties", "alias": "proc_properties", "checksum": {"name": "sha256", "checksum": "3eaec5dd75f52789c1bfcc08e14dab77612b3e839e5207f4edd82037c3985e51"}, "tags": ["dw"], "refs": [["stg_properties"], ["stg_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/processing/supply/proc_properties.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_processing", "tags": "dw", "materialized": "table"}, "created_at": 1650421549.282197, "compiled_sql": "\n\nselect a.id\n\t\t,a.created_at\n\t\t,a.updated_at\n\t\t,a.first_publication_date\n\t\t,a.last_publication_date\n        ,CASE   when for_rental = True and  for_sale = True then 'Rental & Sale'\n                        when for_rental = True and for_sale = False then 'Rental'\n                        when for_rental = False and for_sale = True then 'Sale'\n                        end as business_type\n        ,CASE \twhen b.role like 'broker' or b.role like 'property_broker' then 'B2B'\n        \t\twhen b.role like 'real_estate_developer' then 'real_estate'\n        \t\twhen b.role like 'propietary' then 'B2C'\n        \t\telse 'B2C'\n        \t\tend as property_type\n\t\t,a.neighborhood_id\n\t\t,lower(a.address) as address\n\t\t,lower(a.second_line_address) as second_line_address\n\t\t,a.numero_depto\n\t\t,a.apartment_floor\n\t\t,a.street_number\n\t\t,lower(a.comuna) as comuna\n\t\t,a.region\n\t\t,a.state\n\t\t,a.city\n\t\t,a.country\n\t\t,a.user_id\n\t\t,a.type\n\t\t,a.stratus\n\t\t,a.lessor_id\n\t\t,a.uid\n\t\t,a.is_deleted\n\t\t,a.keys_info\n\t\t,a.lost\n\t\t,a.lost_reason\n\t\t,a.property_relation\n\t\t,a.available_from\n\t\t,a.pipedrive_owner_id\n\t\t,a.antiquity\n\t\t,a.year_built\n\t\t,a.for_rental\n\t\t,a.for_sale\n\t\t,a.lessor_brokerage_commission\nfrom \"houmdw_prod\".\"dbt_staging\".\"stg_properties\" a\nleft join \"houmdw_prod\".\"dbt_staging\".\"stg_users\" b on a.user_id = b.id  \norder by created_at desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_processing\".\"proc_properties\""}, "model.houm.proc_property_salesdetails": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nselect property_id\r\n\t\t,created_at\r\n\t\t,updated_at\r\n\t\t,currency\r\n\t\t,description\r\n\t\t,price\r\n\t\t,status\r\n\t\t,first_publication_date\r\n\t\t,last_publication_date\r\n\t\t,brokerage_commission\r\n\t\t,recommended_price\r\n\t\t,recommended_price_max\r\n\t\t,recommended_price_min\r\n\t\t,currency_code\r\nfrom {{ ref('stg_property_salesdetails') }}\r\norder by created_at desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.houm.stg_property_salesdetails"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_processing", "database": null, "tags": ["dw"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_processing", "fqn": ["houm", "processing", "supply", "proc_property_salesdetails"], "unique_id": "model.houm.proc_property_salesdetails", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "processing/supply/proc_property_salesdetails.sql", "original_file_path": "models/processing/supply/proc_property_salesdetails.sql", "name": "proc_property_salesdetails", "alias": "proc_property_salesdetails", "checksum": {"name": "sha256", "checksum": "717e682db119ee7892aeda7f4b914ff0c20495dd6b96c0fdd040d7b0fd0a4fb9"}, "tags": ["dw"], "refs": [["stg_property_salesdetails"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/processing/supply/proc_property_salesdetails.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_processing", "tags": "dw", "materialized": "table"}, "created_at": 1650421549.3147619, "compiled_sql": "\n\nselect property_id\n\t\t,created_at\n\t\t,updated_at\n\t\t,currency\n\t\t,description\n\t\t,price\n\t\t,status\n\t\t,first_publication_date\n\t\t,last_publication_date\n\t\t,brokerage_commission\n\t\t,recommended_price\n\t\t,recommended_price_max\n\t\t,recommended_price_min\n\t\t,currency_code\nfrom \"houmdw_prod\".\"dbt_staging\".\"stg_property_salesdetails\"\norder by created_at desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_processing\".\"proc_property_salesdetails\""}, "model.houm.proc_propertydetails": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nselect id\r\n\t\t,property_id\r\n\t\t,created_at\r\n\t\t,updated_at\r\n\t\t,m_construidos\r\n\t\t,m_terreno\r\n\t\t,dormitorios\r\n\t\t,banos\r\n\t\t,servicios\r\n\t\t,latitud\r\n\t\t,longitud\r\n\t\t,amoblado\r\n\t\t,orientacion\r\n\t\t,gc\r\n\t\t,terraza\r\n\t\t,piscina\r\n\t\t,condominio\r\n\t\t,calefaccion\r\n\t\t,bodega\r\n\t\t,estacionamientos\r\n\t\t,gym\r\n\t\t,mascotas\r\n\t\t,status\r\nfrom {{ ref('stg_propertydetails') }}\r\norder by created_at desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.houm.stg_propertydetails"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_processing", "database": null, "tags": ["dw"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_processing", "fqn": ["houm", "processing", "supply", "proc_propertydetails"], "unique_id": "model.houm.proc_propertydetails", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "processing/supply/proc_propertydetails.sql", "original_file_path": "models/processing/supply/proc_propertydetails.sql", "name": "proc_propertydetails", "alias": "proc_propertydetails", "checksum": {"name": "sha256", "checksum": "85f4b1f3098717c67862319536c98dd4273465cd1ca09e7d8b7a0d6a74074587"}, "tags": ["dw"], "refs": [["stg_propertydetails"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/processing/supply/proc_propertydetails.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_processing", "tags": "dw", "materialized": "table"}, "created_at": 1650421549.343534, "compiled_sql": "\n\nselect id\n\t\t,property_id\n\t\t,created_at\n\t\t,updated_at\n\t\t,m_construidos\n\t\t,m_terreno\n\t\t,dormitorios\n\t\t,banos\n\t\t,servicios\n\t\t,latitud\n\t\t,longitud\n\t\t,amoblado\n\t\t,orientacion\n\t\t,gc\n\t\t,terraza\n\t\t,piscina\n\t\t,condominio\n\t\t,calefaccion\n\t\t,bodega\n\t\t,estacionamientos\n\t\t,gym\n\t\t,mascotas\n\t\t,status\nfrom \"houmdw_prod\".\"dbt_staging\".\"stg_propertydetails\"\norder by created_at desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_processing\".\"proc_propertydetails\""}, "model.houm.stg_homecheckerdetails": {"raw_sql": "select * \nfrom {{ source('historical', 'historical_arriendoasegurado_homecheckerdetails') }}\nwhere audit_end_dt is null  and audit_action != 'D'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.historical.historical_arriendoasegurado_homecheckerdetails"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_staging", "database": null, "tags": ["dw"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_staging", "fqn": ["houm", "staging", "arriendoasegurado", "stg_homecheckerdetails"], "unique_id": "model.houm.stg_homecheckerdetails", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/arriendoasegurado/stg_homecheckerdetails.sql", "original_file_path": "models/staging/arriendoasegurado/stg_homecheckerdetails.sql", "name": "stg_homecheckerdetails", "alias": "stg_homecheckerdetails", "checksum": {"name": "sha256", "checksum": "a26fb651c6570e56778aff4db76eb3549b642d287227ceb3119a9631859128b5"}, "tags": ["dw"], "refs": [], "sources": [["historical", "historical_arriendoasegurado_homecheckerdetails"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/arriendoasegurado/stg_homecheckerdetails.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_staging", "tags": "dw"}, "created_at": 1650421549.375062, "compiled_sql": "select * \nfrom \"houmdw_prod\".\"historical\".\"historical_arriendoasegurado_homecheckerdetails\"\nwhere audit_end_dt is null  and audit_action != 'D'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_staging\".\"stg_homecheckerdetails\""}, "model.houm.stg_properties_location": {"raw_sql": "select * \nfrom {{ source('raw_stage', 'properties_location') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.raw_stage.properties_location"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_staging", "database": null, "tags": ["dw"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_staging", "fqn": ["houm", "staging", "arriendoasegurado", "stg_properties_location"], "unique_id": "model.houm.stg_properties_location", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/arriendoasegurado/stg_properties_location.sql", "original_file_path": "models/staging/arriendoasegurado/stg_properties_location.sql", "name": "stg_properties_location", "alias": "stg_properties_location", "checksum": {"name": "sha256", "checksum": "1b58c502f46fae77c60c3ffd3e7b1288013befa7caf12bb7a7ee7da409ee3b40"}, "tags": ["dw"], "refs": [], "sources": [["raw_stage", "properties_location"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/arriendoasegurado/stg_properties_location.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_staging", "tags": "dw"}, "created_at": 1650421549.4426863, "compiled_sql": "select * \nfrom \"houmdw_prod\".\"raw_stage\".\"properties_location\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_staging\".\"stg_properties_location\""}, "model.houm.stg_users": {"raw_sql": "select * \r\nfrom {{ source('historical', 'historical_users') }}\r\nwhere audit_end_dt is null and audit_action != 'D'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.historical.historical_users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_staging", "database": null, "tags": ["dw"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_staging", "fqn": ["houm", "staging", "arriendoasegurado", "stg_users"], "unique_id": "model.houm.stg_users", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/arriendoasegurado/stg_users.sql", "original_file_path": "models/staging/arriendoasegurado/stg_users.sql", "name": "stg_users", "alias": "stg_users", "checksum": {"name": "sha256", "checksum": "6f7ffccb60973ba8a959d6859def952d4916f8009f25c42f67014f657af9d1ff"}, "tags": ["dw"], "refs": [], "sources": [["historical", "historical_users"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/arriendoasegurado/stg_users.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_staging", "tags": "dw"}, "created_at": 1650421549.5474913, "compiled_sql": "select * \nfrom \"houmdw_prod\".\"historical\".\"historical_users\"\nwhere audit_end_dt is null and audit_action != 'D'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_staging\".\"stg_users\""}, "model.houm.stg_accounting": {"raw_sql": "SELECT\n    *,\n    person_id + 10000 AS dwh_person_id,\n    'Chile' AS country,\n    'CLP' as currency\nFROM\n    {{ source(\n        'staging_buk',\n        'payrolls_chile'\n    ) }}\nUNION ALL\nSELECT\n    *,\n    person_id + 20000 AS dwh_person_id,\n    'Colombia' AS country,\n    'COP' as currency\nFROM\n    {{ source(\n        'staging_buk',\n        'payrolls_colombia'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.staging_buk.payrolls_colombia", "source.houm.staging_buk.payrolls_chile"]}, "config": {"enabled": true, "alias": null, "schema": "staging_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "staging_finance", "fqn": ["houm", "staging", "buk", "stg_accounting"], "unique_id": "model.houm.stg_accounting", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/buk/stg_accounting.sql", "original_file_path": "models/staging/buk/stg_accounting.sql", "name": "stg_accounting", "alias": "stg_accounting", "checksum": {"name": "sha256", "checksum": "ae55e14999812b2ba673d5095554f725e2976f5086e005331b41980519d4d70b"}, "tags": [], "refs": [], "sources": [["staging_buk", "payrolls_colombia"], ["staging_buk", "payrolls_chile"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/buk/stg_accounting.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging_finance"}, "created_at": 1650421549.5810373, "compiled_sql": "SELECT\n    *,\n    person_id + 10000 AS dwh_person_id,\n    'Chile' AS country,\n    'CLP' as currency\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"payrolls_chile\"\nUNION ALL\nSELECT\n    *,\n    person_id + 20000 AS dwh_person_id,\n    'Colombia' AS country,\n    'COP' as currency\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"payrolls_colombia\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"staging_finance\".\"stg_accounting\""}, "model.houm.stg_areas": {"raw_sql": "SELECT\n    *,\n    id + 10000 AS dwh_area_id,\n    department_id + 10000 AS dwh_department_id,\n    'Chile' AS country\nFROM\n    {{ source(\n        'staging_buk',\n        'areas_chile'\n    ) }}\nUNION ALL\nSELECT\n    *,\n    id + 20000 AS dwh_area_id,\n    department_id + 20000 AS dwh_department_id,\n    'Colombia' AS country\nFROM\n    {{ source(\n        'staging_buk',\n        'areas_colombia'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.staging_buk.areas_colombia", "source.houm.staging_buk.areas_chile"]}, "config": {"enabled": true, "alias": null, "schema": "staging_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "staging_finance", "fqn": ["houm", "staging", "buk", "stg_areas"], "unique_id": "model.houm.stg_areas", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/buk/stg_areas.sql", "original_file_path": "models/staging/buk/stg_areas.sql", "name": "stg_areas", "alias": "stg_areas", "checksum": {"name": "sha256", "checksum": "954ee9ddb188c04944a9d9ba8221e74bc2d267d8dbbc79835c65a90ba9283e39"}, "tags": [], "refs": [], "sources": [["staging_buk", "areas_colombia"], ["staging_buk", "areas_chile"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/buk/stg_areas.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging_finance"}, "created_at": 1650421549.6259978, "compiled_sql": "SELECT\n    *,\n    id + 10000 AS dwh_area_id,\n    department_id + 10000 AS dwh_department_id,\n    'Chile' AS country\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"areas_chile\"\nUNION ALL\nSELECT\n    *,\n    id + 20000 AS dwh_area_id,\n    department_id + 20000 AS dwh_department_id,\n    'Colombia' AS country\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"areas_colombia\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"staging_finance\".\"stg_areas\""}, "model.houm.stg_companies": {"raw_sql": "SELECT\n    *,\n    id + 10000 AS dwh_company_id,\n    'Chile' AS country\nFROM\n    {{ source(\n        'staging_buk',\n        'companies_chile'\n    ) }}\nUNION ALL\nSELECT\n    *,\n    id + 20000 AS dwh_company_id,\n    'Colombia' AS country\nFROM\n    {{ source(\n        'staging_buk',\n        'companies_colombia'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.staging_buk.companies_chile", "source.houm.staging_buk.companies_colombia"]}, "config": {"enabled": true, "alias": null, "schema": "staging_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "staging_finance", "fqn": ["houm", "staging", "buk", "stg_companies"], "unique_id": "model.houm.stg_companies", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/buk/stg_companies.sql", "original_file_path": "models/staging/buk/stg_companies.sql", "name": "stg_companies", "alias": "stg_companies", "checksum": {"name": "sha256", "checksum": "2429f81e0c1eb864e08f3d5a893a92da047262124d9d0d25728029f9fe894183"}, "tags": [], "refs": [], "sources": [["staging_buk", "companies_chile"], ["staging_buk", "companies_colombia"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/buk/stg_companies.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging_finance"}, "created_at": 1650421549.6780248, "compiled_sql": "SELECT\n    *,\n    id + 10000 AS dwh_company_id,\n    'Chile' AS country\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"companies_chile\"\nUNION ALL\nSELECT\n    *,\n    id + 20000 AS dwh_company_id,\n    'Colombia' AS country\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"companies_colombia\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"staging_finance\".\"stg_companies\""}, "model.houm.stg_departments": {"raw_sql": "SELECT\n    *,\n    id + 10000 AS dwh_department_id,\n    division_id + 10000 AS dwh_division_id,\n    'Chile' AS country\nFROM\n    {{ source(\n        'staging_buk',\n        'departments_chile'\n    ) }}\nUNION ALL\nSELECT\n    *,\n    id + 20000 AS dwh_department_id,\n    division_id + 20000 AS dwh_division_id,\n    'Colombia' AS country\nFROM\n    {{ source(\n        'staging_buk',\n        'departments_colombia'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.staging_buk.departments_colombia", "source.houm.staging_buk.departments_chile"]}, "config": {"enabled": true, "alias": null, "schema": "staging_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "staging_finance", "fqn": ["houm", "staging", "buk", "stg_departments"], "unique_id": "model.houm.stg_departments", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/buk/stg_departments.sql", "original_file_path": "models/staging/buk/stg_departments.sql", "name": "stg_departments", "alias": "stg_departments", "checksum": {"name": "sha256", "checksum": "ff3be5bca1f7a8324d163d870b80455917e26511e788977971a955f85e39355c"}, "tags": [], "refs": [], "sources": [["staging_buk", "departments_colombia"], ["staging_buk", "departments_chile"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/buk/stg_departments.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging_finance"}, "created_at": 1650421549.727535, "compiled_sql": "SELECT\n    *,\n    id + 10000 AS dwh_department_id,\n    division_id + 10000 AS dwh_division_id,\n    'Chile' AS country\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"departments_chile\"\nUNION ALL\nSELECT\n    *,\n    id + 20000 AS dwh_department_id,\n    division_id + 20000 AS dwh_division_id,\n    'Colombia' AS country\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"departments_colombia\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"staging_finance\".\"stg_departments\""}, "model.houm.stg_jobs": {"raw_sql": "SELECT\n    *,\n    company_id + 10000 AS dwh_company_id,\n    area_id + 10000 AS dwh_area_id,\n    person_id + 10000 AS dwh_person_id,\n    role_id + 10000 AS dwh_role_id,\n    employee_id + 10000 AS dwh_employee_id,\n    boss_id + 10000 AS dwh_boss_id,\n    'Chile' AS country\nFROM\n    {{ source(\n        'staging_buk',\n        'jobs_chile'\n    ) }}\nUNION ALL\nSELECT\n    *,\n    company_id + 20000 AS dwh_company_id,\n    area_id + 20000 AS dwh_area_id,\n    person_id + 20000 AS dwh_person_id,\n    role_id + 20000 AS dwh_role_id,\n    employee_id + 20000 AS dwh_employee_id,\n    boss_id + 20000 AS dwh_boss_id,\n    'Colombia' AS country\nFROM\n    {{ source(\n        'staging_buk',\n        'jobs_colombia'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.staging_buk.jobs_colombia", "source.houm.staging_buk.jobs_chile"]}, "config": {"enabled": true, "alias": null, "schema": "staging_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "staging_finance", "fqn": ["houm", "staging", "buk", "stg_jobs"], "unique_id": "model.houm.stg_jobs", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/buk/stg_jobs.sql", "original_file_path": "models/staging/buk/stg_jobs.sql", "name": "stg_jobs", "alias": "stg_jobs", "checksum": {"name": "sha256", "checksum": "3aa78d1d9fda9877ae209a16a3ea6cf4a8b550fa4914c7182b05af373329fd59"}, "tags": [], "refs": [], "sources": [["staging_buk", "jobs_colombia"], ["staging_buk", "jobs_chile"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/buk/stg_jobs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging_finance"}, "created_at": 1650421549.8158846, "compiled_sql": "SELECT\n    *,\n    company_id + 10000 AS dwh_company_id,\n    area_id + 10000 AS dwh_area_id,\n    person_id + 10000 AS dwh_person_id,\n    role_id + 10000 AS dwh_role_id,\n    employee_id + 10000 AS dwh_employee_id,\n    boss_id + 10000 AS dwh_boss_id,\n    'Chile' AS country\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"jobs_chile\"\nUNION ALL\nSELECT\n    *,\n    company_id + 20000 AS dwh_company_id,\n    area_id + 20000 AS dwh_area_id,\n    person_id + 20000 AS dwh_person_id,\n    role_id + 20000 AS dwh_role_id,\n    employee_id + 20000 AS dwh_employee_id,\n    boss_id + 20000 AS dwh_boss_id,\n    'Colombia' AS country\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"jobs_colombia\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"staging_finance\".\"stg_jobs\""}, "model.houm.stg_line_settlements": {"raw_sql": "SELECT\n    *,\n    person_id + 10000 AS dwh_person_id,\n    'Chile' AS country,\n    TO_DATE(CAST(YEAR AS text) + '-' + CAST(MONTH AS text) + '-01', 'YYYY-MM-DD') AS ls_date,\n    'CLP' AS currency\nFROM\n    {{ source(\n        'staging_buk',\n        'line_settlements_chile'\n    ) }}\nUNION ALL\nSELECT\n    *,\n    person_id + 20000 AS dwh_person_id,\n    'Colombia' AS country,\n    TO_DATE(CAST(YEAR AS text) + '-' + CAST(MONTH AS text) + '-01', 'YYYY-MM-DD') AS ls_date,\n    'COP' AS currency\nFROM\n    {{ source(\n        'staging_buk',\n        'line_settlements_colombia'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.staging_buk.line_settlements_colombia", "source.houm.staging_buk.line_settlements_chile"]}, "config": {"enabled": true, "alias": null, "schema": "staging_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "staging_finance", "fqn": ["houm", "staging", "buk", "stg_line_settlements"], "unique_id": "model.houm.stg_line_settlements", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/buk/stg_line_settlements.sql", "original_file_path": "models/staging/buk/stg_line_settlements.sql", "name": "stg_line_settlements", "alias": "stg_line_settlements", "checksum": {"name": "sha256", "checksum": "ecefd56e99357acad2c09b9b7d22431c474bc1f9c3ca9a44585ff68db117d6f1"}, "tags": [], "refs": [], "sources": [["staging_buk", "line_settlements_colombia"], ["staging_buk", "line_settlements_chile"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/buk/stg_line_settlements.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging_finance"}, "created_at": 1650421549.8535903, "compiled_sql": "SELECT\n    *,\n    person_id + 10000 AS dwh_person_id,\n    'Chile' AS country,\n    TO_DATE(CAST(YEAR AS text) + '-' + CAST(MONTH AS text) + '-01', 'YYYY-MM-DD') AS ls_date,\n    'CLP' AS currency\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"line_settlements_chile\"\nUNION ALL\nSELECT\n    *,\n    person_id + 20000 AS dwh_person_id,\n    'Colombia' AS country,\n    TO_DATE(CAST(YEAR AS text) + '-' + CAST(MONTH AS text) + '-01', 'YYYY-MM-DD') AS ls_date,\n    'COP' AS currency\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"line_settlements_colombia\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"staging_finance\".\"stg_line_settlements\""}, "model.houm.stg_payrolls": {"raw_sql": "SELECT\n    *,\n    person_id + 10000 AS dwh_person_id,\n    'Chile' AS country,\n    TO_DATE(CAST(payroll_year AS text) + '-' + CAST(payroll_month AS text) + '-01', 'YYYY-MM-DD') AS pr_date,\n    'CLP' as currency\nFROM\n    {{ source(\n        'staging_buk',\n        'payrolls_chile'\n    ) }}\nUNION ALL\nSELECT\n    *,\n    person_id + 20000 AS dwh_person_id,\n    'Colombia' AS country,\n    TO_DATE(CAST(payroll_year AS text) + '-' + CAST(payroll_month AS text) + '-01', 'YYYY-MM-DD') AS pr_date,\n    'COP' as currency\nFROM\n    {{ source(\n        'staging_buk',\n        'payrolls_colombia'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.staging_buk.payrolls_colombia", "source.houm.staging_buk.payrolls_chile"]}, "config": {"enabled": true, "alias": null, "schema": "staging_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "staging_finance", "fqn": ["houm", "staging", "buk", "stg_payrolls"], "unique_id": "model.houm.stg_payrolls", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/buk/stg_payrolls.sql", "original_file_path": "models/staging/buk/stg_payrolls.sql", "name": "stg_payrolls", "alias": "stg_payrolls", "checksum": {"name": "sha256", "checksum": "4991338cfd6d03f822862de6d9299e8060d86fed7151ca5ea5ec6af6fd0685b4"}, "tags": [], "refs": [], "sources": [["staging_buk", "payrolls_colombia"], ["staging_buk", "payrolls_chile"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/buk/stg_payrolls.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging_finance"}, "created_at": 1650421549.8860834, "compiled_sql": "SELECT\n    *,\n    person_id + 10000 AS dwh_person_id,\n    'Chile' AS country,\n    TO_DATE(CAST(payroll_year AS text) + '-' + CAST(payroll_month AS text) + '-01', 'YYYY-MM-DD') AS pr_date,\n    'CLP' as currency\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"payrolls_chile\"\nUNION ALL\nSELECT\n    *,\n    person_id + 20000 AS dwh_person_id,\n    'Colombia' AS country,\n    TO_DATE(CAST(payroll_year AS text) + '-' + CAST(payroll_month AS text) + '-01', 'YYYY-MM-DD') AS pr_date,\n    'COP' as currency\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"payrolls_colombia\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"staging_finance\".\"stg_payrolls\""}, "test.houm.assert_properties_rent_prices_chile": {"raw_sql": "-- Test if there are incorrect rent values\nselect\n    valor\nfrom {{ ref('stg_propertydetails' )}}  propertiesdetails\ninner join {{ref('stg_properties')}} properties on properties.id = propertiesdetails.property_id\nwhere valor >= 6000000 and propertiesdetails.status in ('published','republished') and properties.for_rental and  properties.country='Chile'", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.houm.stg_propertydetails", "model.houm.stg_properties"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "houmdw_prod", "schema": "dbt_test__audit", "fqn": ["houm", "staging", "assert_properties_rent_prices_chile"], "unique_id": "test.houm.assert_properties_rent_prices_chile", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/assert_properties_rent_prices_chile.sql", "original_file_path": "tests/staging/assert_properties_rent_prices_chile.sql", "name": "assert_properties_rent_prices_chile", "alias": "assert_properties_rent_prices_chile", "checksum": {"name": "sha256", "checksum": "4ec2e33ef03374d3793a93f32671a95972e1c84f375e743e9b7a4dcfa981e093"}, "tags": [], "refs": [["stg_propertydetails"], ["stg_properties"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/tests/staging/assert_properties_rent_prices_chile.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.2485495, "compiled_sql": "-- Test if there are incorrect rent values\nselect\n    valor\nfrom \"houmdw_prod\".\"dbt_staging\".\"stg_propertydetails\"  propertiesdetails\ninner join \"houmdw_prod\".\"dbt_staging\".\"stg_properties\" properties on properties.id = propertiesdetails.property_id\nwhere valor >= 6000000 and propertiesdetails.status in ('published','republished') and properties.for_rental and  properties.country='Chile'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "operation.houm.houm-on-run-end-0": {"raw_sql": "grant usage on schema analytics to metabase", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-0"], "unique_id": "operation.houm.houm-on-run-end-0", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-0", "alias": "houm-on-run-end-0", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-0.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.38585, "compiled_sql": "grant usage on schema analytics to metabase", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.houm.houm-on-run-end-1": {"raw_sql": "grant select on all tables in schema analytics to metabase", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-1"], "unique_id": "operation.houm.houm-on-run-end-1", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-1.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-1", "alias": "houm-on-run-end-1", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.4078279, "compiled_sql": "grant select on all tables in schema analytics to metabase", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 1}, "operation.houm.houm-on-run-end-2": {"raw_sql": "GRANT USAGE ON SCHEMA \"dbt_staging\" TO GROUP houm_analysts", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-2"], "unique_id": "operation.houm.houm-on-run-end-2", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-2.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-2", "alias": "houm-on-run-end-2", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-2.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.431932, "compiled_sql": "GRANT USAGE ON SCHEMA \"dbt_staging\" TO GROUP houm_analysts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 2}, "operation.houm.houm-on-run-end-3": {"raw_sql": "GRANT USAGE ON SCHEMA \"dbt_marts\" TO GROUP houm_analysts", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-3"], "unique_id": "operation.houm.houm-on-run-end-3", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-3.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-3", "alias": "houm-on-run-end-3", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-3.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.4555979, "compiled_sql": "GRANT USAGE ON SCHEMA \"dbt_marts\" TO GROUP houm_analysts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 3}, "operation.houm.houm-on-run-end-4": {"raw_sql": "GRANT USAGE ON SCHEMA \"dbt_dims\" TO GROUP houm_analysts", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-4"], "unique_id": "operation.houm.houm-on-run-end-4", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-4.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-4", "alias": "houm-on-run-end-4", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-4.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.4790807, "compiled_sql": "GRANT USAGE ON SCHEMA \"dbt_dims\" TO GROUP houm_analysts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 4}, "operation.houm.houm-on-run-end-5": {"raw_sql": "GRANT USAGE ON SCHEMA \"dbt_processing\" TO GROUP houm_analysts", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-5"], "unique_id": "operation.houm.houm-on-run-end-5", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-5.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-5", "alias": "houm-on-run-end-5", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-5.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.5010004, "compiled_sql": "GRANT USAGE ON SCHEMA \"dbt_processing\" TO GROUP houm_analysts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 5}, "operation.houm.houm-on-run-end-6": {"raw_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_staging\" TO GROUP houm_analysts", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-6"], "unique_id": "operation.houm.houm-on-run-end-6", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-6.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-6", "alias": "houm-on-run-end-6", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-6.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.5238948, "compiled_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_staging\" TO GROUP houm_analysts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 6}, "operation.houm.houm-on-run-end-7": {"raw_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_dims\" TO GROUP houm_analysts", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-7"], "unique_id": "operation.houm.houm-on-run-end-7", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-7.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-7", "alias": "houm-on-run-end-7", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-7.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.5467389, "compiled_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_dims\" TO GROUP houm_analysts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 7}, "operation.houm.houm-on-run-end-8": {"raw_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_marts\" TO GROUP houm_analysts", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-8"], "unique_id": "operation.houm.houm-on-run-end-8", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-8.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-8", "alias": "houm-on-run-end-8", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-8.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.573737, "compiled_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_marts\" TO GROUP houm_analysts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 8}, "operation.houm.houm-on-run-end-9": {"raw_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_processing\" TO GROUP houm_analysts", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-9"], "unique_id": "operation.houm.houm-on-run-end-9", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-9.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-9", "alias": "houm-on-run-end-9", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-9.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.6039999, "compiled_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_processing\" TO GROUP houm_analysts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 9}, "operation.houm.houm-on-run-end-10": {"raw_sql": "GRANT USAGE ON SCHEMA \"dbt_staging\" TO GROUP data_engineering", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-10"], "unique_id": "operation.houm.houm-on-run-end-10", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-10.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-10", "alias": "houm-on-run-end-10", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-10.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.6383927, "compiled_sql": "GRANT USAGE ON SCHEMA \"dbt_staging\" TO GROUP data_engineering", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 10}, "operation.houm.houm-on-run-end-11": {"raw_sql": "GRANT USAGE ON SCHEMA \"dbt_marts\" TO GROUP data_engineering", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-11"], "unique_id": "operation.houm.houm-on-run-end-11", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-11.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-11", "alias": "houm-on-run-end-11", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-11.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.666891, "compiled_sql": "GRANT USAGE ON SCHEMA \"dbt_marts\" TO GROUP data_engineering", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 11}, "operation.houm.houm-on-run-end-12": {"raw_sql": "GRANT USAGE ON SCHEMA \"dbt_dims\" TO GROUP data_engineering", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-12"], "unique_id": "operation.houm.houm-on-run-end-12", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-12.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-12", "alias": "houm-on-run-end-12", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-12.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.7100983, "compiled_sql": "GRANT USAGE ON SCHEMA \"dbt_dims\" TO GROUP data_engineering", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 12}, "operation.houm.houm-on-run-end-13": {"raw_sql": "GRANT USAGE ON SCHEMA \"dbt_processing\" TO GROUP data_engineering", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-13"], "unique_id": "operation.houm.houm-on-run-end-13", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-13.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-13", "alias": "houm-on-run-end-13", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-13.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.7387679, "compiled_sql": "GRANT USAGE ON SCHEMA \"dbt_processing\" TO GROUP data_engineering", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 13}, "operation.houm.houm-on-run-end-14": {"raw_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_staging\" TO GROUP data_engineering", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-14"], "unique_id": "operation.houm.houm-on-run-end-14", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-14.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-14", "alias": "houm-on-run-end-14", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-14.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.7675526, "compiled_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_staging\" TO GROUP data_engineering", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 14}, "operation.houm.houm-on-run-end-15": {"raw_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_dims\" TO GROUP data_engineering", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-15"], "unique_id": "operation.houm.houm-on-run-end-15", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-15.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-15", "alias": "houm-on-run-end-15", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-15.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.8066797, "compiled_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_dims\" TO GROUP data_engineering", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 15}, "operation.houm.houm-on-run-end-16": {"raw_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_marts\" TO GROUP data_engineering", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-16"], "unique_id": "operation.houm.houm-on-run-end-16", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-16.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-16", "alias": "houm-on-run-end-16", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-16.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.8645165, "compiled_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_marts\" TO GROUP data_engineering", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 16}, "operation.houm.houm-on-run-end-17": {"raw_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_processing\" TO GROUP data_engineering", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "analytics", "fqn": ["houm", "hooks", "houm-on-run-end-17"], "unique_id": "operation.houm.houm-on-run-end-17", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "hooks/houm-on-run-end-17.sql", "original_file_path": "./dbt_project.yml", "name": "houm-on-run-end-17", "alias": "houm-on-run-end-17", "checksum": {"name": "sha256", "checksum": "10e304a51f9e18a46893e5db80be480eb1d6478b2fa0a2c031b0eb41072e9af8"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/./dbt_project.yml/hooks/houm-on-run-end-17.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421550.9090555, "compiled_sql": "GRANT SELECT ON ALL TABLES IN SCHEMA \"dbt_processing\" TO GROUP data_engineering", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 17}, "test.houm.unique_dim_macrozones_macrozone.99a7937a3d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "macrozone", "model": "{{ get_where_subquery(ref('dim_macrozones')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.houm.dim_macrozones"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "houmdw_prod", "schema": "dbt_test__audit", "fqn": ["houm", "dims", "unique_dim_macrozones_macrozone"], "unique_id": "test.houm.unique_dim_macrozones_macrozone.99a7937a3d", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "unique_dim_macrozones_macrozone.sql", "original_file_path": "models/dims/schema.yml", "name": "unique_dim_macrozones_macrozone", "alias": "unique_dim_macrozones_macrozone", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_macrozones"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/dims/schema.yml/unique_dim_macrozones_macrozone.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421551.2104478, "compiled_sql": "\n    \n    \n\nselect\n    macrozone as unique_field,\n    count(*) as n_records\n\nfrom \"houmdw_prod\".\"dbt_dims\".\"dim_macrozones\"\nwhere macrozone is not null\ngroup by macrozone\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "macrozone", "file_key_name": "models.dim_macrozones"}, "test.houm.not_null_dim_macrozones_macrozone.5c78ef2445": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "macrozone", "model": "{{ get_where_subquery(ref('dim_macrozones')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.houm.dim_macrozones"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "houmdw_prod", "schema": "dbt_test__audit", "fqn": ["houm", "dims", "not_null_dim_macrozones_macrozone"], "unique_id": "test.houm.not_null_dim_macrozones_macrozone.5c78ef2445", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "not_null_dim_macrozones_macrozone.sql", "original_file_path": "models/dims/schema.yml", "name": "not_null_dim_macrozones_macrozone", "alias": "not_null_dim_macrozones_macrozone", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_macrozones"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/dims/schema.yml/not_null_dim_macrozones_macrozone.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421551.2318234, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"houmdw_prod\".\"dbt_dims\".\"dim_macrozones\"\nwhere macrozone is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "macrozone", "file_key_name": "models.dim_macrozones"}, "test.houm.unique_properties_published_property_id.3fc869c6e4": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "property_id", "model": "{{ get_where_subquery(ref('properties_published')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.houm.properties_published"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "houmdw_prod", "schema": "dbt_test__audit", "fqn": ["houm", "marts", "unique_properties_published_property_id"], "unique_id": "test.houm.unique_properties_published_property_id.3fc869c6e4", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "unique_properties_published_property_id.sql", "original_file_path": "models/marts/schema.yml", "name": "unique_properties_published_property_id", "alias": "unique_properties_published_property_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["properties_published"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/marts/schema.yml/unique_properties_published_property_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421551.364901, "compiled_sql": "\n    \n    \n\nselect\n    property_id as unique_field,\n    count(*) as n_records\n\nfrom \"houmdw_prod\".\"dbt_marts\".\"properties_published\"\nwhere property_id is not null\ngroup by property_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "property_id", "file_key_name": "models.properties_published"}, "test.houm.not_null_properties_published_property_id.cfd67d7b86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "property_id", "model": "{{ get_where_subquery(ref('properties_published')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.houm.properties_published"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "houmdw_prod", "schema": "dbt_test__audit", "fqn": ["houm", "marts", "not_null_properties_published_property_id"], "unique_id": "test.houm.not_null_properties_published_property_id.cfd67d7b86", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "not_null_properties_published_property_id.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_properties_published_property_id", "alias": "not_null_properties_published_property_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["properties_published"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/marts/schema.yml/not_null_properties_published_property_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650421551.386723, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"houmdw_prod\".\"dbt_marts\".\"properties_published\"\nwhere property_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "property_id", "file_key_name": "models.properties_published"}, "model.houm.stg_zendesk_users": {"raw_sql": "select \tid\n\t\t,created_at\n\t\t,updated_at \n\t\t,email\n\t\t,name\n\t\t,phone\n\t\t,time_zone \n\t\t,default_group_id \n\t\t,role\n\t\t,active \n\t\t,suspended\n\t\t,restricted_agent\n\t\t,verified \n\t\t,organization_id\n\t\t,signature \n\t\t,custom_role_id\n\t\t,tags\n\t\t,external_id \n\t\t,two_factor_auth_enabled \n\t\t,last_login_at \n\t\t,moderator \n\t\t,user_fields_id_de_propiedad \n\t\t,user_fields_tipo_de_usuario \n\t\t,user_fields_whatsapp  \n\t\t,user_fields_rut \n\t\t,user_fields_id_suscripcin \n\t\t,user_fields_social_messaging_user_info \n\t\t,user_fields_nombre \n\t\t,concat('https://houm.zendesk.com/agent/users/',id) as url\nfrom {{ source('zendesk','users') }} a\norder by updated_at  desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.zendesk.users", "source.houm.zendesk.users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_staging", "database": null, "tags": ["dw", "zendesk"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_staging", "fqn": ["houm", "staging", "zendesk", "stg_zendesk_users"], "unique_id": "model.houm.stg_zendesk_users", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/zendesk/stg_zendesk_users.sql", "original_file_path": "models/staging/zendesk/stg_zendesk_users.sql", "name": "stg_zendesk_users", "alias": "stg_zendesk_users", "checksum": {"name": "sha256", "checksum": "e405e21d97fa9d1105b219ee1829f5a905f1ebb41ac87620b8dbdf7e632f77fe"}, "tags": ["dw", "zendesk"], "refs": [], "sources": [["zendesk", "users"]], "description": "", "columns": {"id": {"name": "id", "description": "This is a unique identifier for the users at Houm Zendesk", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "houm://models/staging/schema.yml", "compiled_path": "target/compiled/houm/models/staging/zendesk/stg_zendesk_users.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_staging", "tags": ["dw", "zendesk"]}, "created_at": 1650432061.9303887, "compiled_sql": "select \tid\n\t\t,created_at\n\t\t,updated_at \n\t\t,email\n\t\t,name\n\t\t,phone\n\t\t,time_zone \n\t\t,default_group_id \n\t\t,role\n\t\t,active \n\t\t,suspended\n\t\t,restricted_agent\n\t\t,verified \n\t\t,organization_id\n\t\t,signature \n\t\t,custom_role_id\n\t\t,tags\n\t\t,external_id \n\t\t,two_factor_auth_enabled \n\t\t,last_login_at \n\t\t,moderator \n\t\t,user_fields_id_de_propiedad \n\t\t,user_fields_tipo_de_usuario \n\t\t,user_fields_whatsapp  \n\t\t,user_fields_rut \n\t\t,user_fields_id_suscripcin \n\t\t,user_fields_social_messaging_user_info \n\t\t,user_fields_nombre \n\t\t,concat('https://houm.zendesk.com/agent/users/',id) as url\nfrom \"houmdw_prod\".\"zendesk\".\"users\" a\norder by updated_at  desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_staging\".\"stg_zendesk_users\""}, "model.houm.stg_zendesk_tickets": {"raw_sql": "SELECT \n         id\n\t\t,created_at \n\t\t,updated_at \n\t\t,status\n\t\t,priority\n\t\t,type\n\t\t,tags\n\t\t,subject \n\t\t,assignee_id \n\t\t,submitter_id \n\t\t,requester_id \n\t\t,collaborator_ids\n\t\t,external_id\n\t\t,group_id\n\t\t,brand_id\n\t\t,custom_fields \n\t\t,recipient\n\t\t,email_cc_ids\n\t\t,follower_ids\n\t\t,followup_ids\n\t\t,via \n\t\t,concat('https://houm.zendesk.com/agent/tickets/',id) as url\n\t\t,\"_airbyte_tickets_hashid\" \nFROM\n    {{ source('airbyte_zendesk','tickets') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.airbyte_zendesk.tickets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_staging", "database": null, "tags": ["dw", "zendesk"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_staging", "fqn": ["houm", "staging", "zendesk", "stg_zendesk_tickets"], "unique_id": "model.houm.stg_zendesk_tickets", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/zendesk/stg_zendesk_tickets.sql", "original_file_path": "models/staging/zendesk/stg_zendesk_tickets.sql", "name": "stg_zendesk_tickets", "alias": "stg_zendesk_tickets", "checksum": {"name": "sha256", "checksum": "ce1bc662afb9c5ff7dc956b16f825b0d58c0b3ad848b2427ea5a1c6534119598"}, "tags": ["dw", "zendesk"], "refs": [], "sources": [["airbyte_zendesk", "tickets"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/zendesk/stg_zendesk_tickets.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_staging", "tags": ["dw", "zendesk"]}, "created_at": 1650430557.5776925, "compiled_sql": "SELECT \n         id\n\t\t,created_at \n\t\t,updated_at \n\t\t,status\n\t\t,priority\n\t\t,type\n\t\t,tags\n\t\t,subject \n\t\t,assignee_id \n\t\t,submitter_id \n\t\t,requester_id \n\t\t,collaborator_ids\n\t\t,external_id\n\t\t,group_id\n\t\t,brand_id\n\t\t,custom_fields \n\t\t,recipient\n\t\t,email_cc_ids\n\t\t,follower_ids\n\t\t,followup_ids\n\t\t,via \n\t\t,concat('https://houm.zendesk.com/agent/tickets/',id) as url\n\t\t,\"_airbyte_tickets_hashid\" \nFROM\n    \"houmdw_prod\".\"airbyte_zendesk\".\"tickets\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_staging\".\"stg_zendesk_tickets\""}, "model.houm.stg_zendesk_metrics": {"raw_sql": "SELECT \n    *\nFROM\n    {{ source('airbyte_zendesk','ticket_metrics') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.airbyte_zendesk.ticket_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_staging", "database": null, "tags": ["dw", "zendesk"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_staging", "fqn": ["houm", "staging", "zendesk", "stg_zendesk_metrics"], "unique_id": "model.houm.stg_zendesk_metrics", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/zendesk/stg_zendesk_metrics.sql", "original_file_path": "models/staging/zendesk/stg_zendesk_metrics.sql", "name": "stg_zendesk_metrics", "alias": "stg_zendesk_metrics", "checksum": {"name": "sha256", "checksum": "e58109225199bdaba0fcd60324276274efe56b1370f98f7a16b41c62b2bd1474"}, "tags": ["dw", "zendesk"], "refs": [], "sources": [["airbyte_zendesk", "ticket_metrics"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/zendesk/stg_zendesk_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_staging", "tags": ["dw", "zendesk"]}, "created_at": 1650430557.6237974, "compiled_sql": "SELECT \n    *\nFROM\n    \"houmdw_prod\".\"airbyte_zendesk\".\"ticket_metrics\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_staging\".\"stg_zendesk_metrics\""}, "model.houm.stg_zendesk_tickets_audits_via": {"raw_sql": "select ta.id\n\t\t,ta.created_at \n\t\t,ta.ticket_id \n\t\t,ta.author_id \n\t\t,tav.\"source\" \n\t\t,tav.channel \n\t\t,tavsf.name source_from_name\n\t\t,tavsf.address  source_from_address\n\t\t,tavst.name source_to_name\n\t\t,tavst.address  source_to_address\nfrom {{ source('airbyte_zendesk','ticket_audits') }} ta\nLEFT JOIN {{ source('airbyte_zendesk','ticket_audits_via') }} tav on ta.\"_airbyte_ticket_audits_hashid\"  = tav.\"_airbyte_ticket_audits_hashid\" \nLEFT JOIN {{ source('airbyte_zendesk','ticket_audits_via_source') }} tavs on tav.\"_airbyte_via_hashid\"  = tavs.\"_airbyte_via_hashid\"\nLEFT JOIN {{ source('airbyte_zendesk','ticket_audits_via_source_to') }} tavst on tavs.\"_airbyte_source_hashid\"  = tavst.\"_airbyte_source_hashid\" \nLEFT JOIN {{ source('airbyte_zendesk','ticket_audits_via_source_from') }} tavsf on tavs.\"_airbyte_source_hashid\"  = tavsf.\"_airbyte_source_hashid\" \nORDER BY ta.created_at--,tae.id asc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.airbyte_zendesk.ticket_audits_via_source", "source.houm.airbyte_zendesk.ticket_audits_via_source_from", "source.houm.airbyte_zendesk.ticket_audits", "source.houm.airbyte_zendesk.ticket_audits_via", "source.houm.airbyte_zendesk.ticket_audits_via_source_to"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_staging", "database": null, "tags": ["dw", "zendesk"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_staging", "fqn": ["houm", "staging", "zendesk", "stg_zendesk_tickets_audits_via"], "unique_id": "model.houm.stg_zendesk_tickets_audits_via", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/zendesk/stg_zendesk_tickets_audits_via.sql", "original_file_path": "models/staging/zendesk/stg_zendesk_tickets_audits_via.sql", "name": "stg_zendesk_tickets_audits_via", "alias": "stg_zendesk_tickets_audits_via", "checksum": {"name": "sha256", "checksum": "e95922e4131b90ce9dcab6132a061001be9d70e8566d66bb9de2d3b360f43725"}, "tags": ["dw", "zendesk"], "refs": [], "sources": [["airbyte_zendesk", "ticket_audits_via_source"], ["airbyte_zendesk", "ticket_audits_via_source_from"], ["airbyte_zendesk", "ticket_audits"], ["airbyte_zendesk", "ticket_audits_via"], ["airbyte_zendesk", "ticket_audits_via_source_to"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/zendesk/stg_zendesk_tickets_audits_via.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_staging", "tags": ["dw", "zendesk"]}, "created_at": 1650431211.4912612, "compiled_sql": "select ta.id\n\t\t,ta.created_at \n\t\t,ta.ticket_id \n\t\t,ta.author_id \n\t\t,tav.\"source\" \n\t\t,tav.channel \n\t\t,tavsf.name source_from_name\n\t\t,tavsf.address  source_from_address\n\t\t,tavst.name source_to_name\n\t\t,tavst.address  source_to_address\nfrom \"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits\" ta\nLEFT JOIN \"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits_via\" tav on ta.\"_airbyte_ticket_audits_hashid\"  = tav.\"_airbyte_ticket_audits_hashid\" \nLEFT JOIN \"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits_via_source\" tavs on tav.\"_airbyte_via_hashid\"  = tavs.\"_airbyte_via_hashid\"\nLEFT JOIN \"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits_via_source_to\" tavst on tavs.\"_airbyte_source_hashid\"  = tavst.\"_airbyte_source_hashid\" \nLEFT JOIN \"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits_via_source_from\" tavsf on tavs.\"_airbyte_source_hashid\"  = tavsf.\"_airbyte_source_hashid\" \nORDER BY ta.created_at--,tae.id asc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_staging\".\"stg_zendesk_tickets_audits_via\""}, "model.houm.stg_zendesk_tickets_audits_events": {"raw_sql": "select ta.id\n\t\t,ta.created_at \n\t\t,ta.ticket_id \n\t\t,ta.author_id \n\t\t,ta.via \n\t\t,ta.events \n\t\t--,ta._airbyte_ticket_audits_hashid\n\t\t,tae.id as event_id \n\t\t,tae.plain_body\n\t\t,tae.type\n\t\t,tae.value \n\t\t,tae.public\n\t\t,tae.subject\n\t\t,tae.trusted\n\t\t,tae.audit_id \n\t\t,tae.macro_id \n\t\t,tae.macro_title \n\t\t,tae.resource \n\t\t,tae.author_id as event_author_id\n\t\t,tae.recipients \n\t\t,tae.previous_value\nFROM\n    {{ source('airbyte_zendesk','ticket_audits') }} ta\nLEFT JOIN {{ source('airbyte_zendesk','ticket_audits_events') }} tae on ta.\"_airbyte_ticket_audits_hashid\"  = tae.\"_airbyte_ticket_audits_hashid\"\norder by ta.created_at,tae.id asc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.airbyte_zendesk.ticket_audits_events", "source.houm.airbyte_zendesk.ticket_audits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_staging", "database": null, "tags": ["dw", "zendesk"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_staging", "fqn": ["houm", "staging", "zendesk", "stg_zendesk_tickets_audits_events"], "unique_id": "model.houm.stg_zendesk_tickets_audits_events", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/zendesk/stg_zendesk_tickets_audits_events.sql", "original_file_path": "models/staging/zendesk/stg_zendesk_tickets_audits_events.sql", "name": "stg_zendesk_tickets_audits_events", "alias": "stg_zendesk_tickets_audits_events", "checksum": {"name": "sha256", "checksum": "4bc9f68737116e81053d361cfb5e51d7042ce36118ad020b02e24bc8fa157029"}, "tags": ["dw", "zendesk"], "refs": [], "sources": [["airbyte_zendesk", "ticket_audits_events"], ["airbyte_zendesk", "ticket_audits"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/zendesk/stg_zendesk_tickets_audits_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_staging", "tags": ["dw", "zendesk"]}, "created_at": 1650431430.9573956, "compiled_sql": "select ta.id\n\t\t,ta.created_at \n\t\t,ta.ticket_id \n\t\t,ta.author_id \n\t\t,ta.via \n\t\t,ta.events \n\t\t--,ta._airbyte_ticket_audits_hashid\n\t\t,tae.id as event_id \n\t\t,tae.plain_body\n\t\t,tae.type\n\t\t,tae.value \n\t\t,tae.public\n\t\t,tae.subject\n\t\t,tae.trusted\n\t\t,tae.audit_id \n\t\t,tae.macro_id \n\t\t,tae.macro_title \n\t\t,tae.resource \n\t\t,tae.author_id as event_author_id\n\t\t,tae.recipients \n\t\t,tae.previous_value\nFROM\n    \"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits\" ta\nLEFT JOIN \"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits_events\" tae on ta.\"_airbyte_ticket_audits_hashid\"  = tae.\"_airbyte_ticket_audits_hashid\"\norder by ta.created_at,tae.id asc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_staging\".\"stg_zendesk_tickets_audits_events\""}, "model.houm.stg_zendesk_tickets_audits": {"raw_sql": "select ta.id\n\t\t,ta.created_at \n\t\t,ta.ticket_id \n\t\t,ta.author_id \n\t\t--,ta.via \n\t\t--,ta.events \n\t\t,ta._airbyte_ticket_audits_hashid\nFROM\n    {{ source('airbyte_zendesk','ticket_audits') }} ta", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.airbyte_zendesk.ticket_audits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_staging", "database": null, "tags": ["dw", "zendesk"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_staging", "fqn": ["houm", "staging", "zendesk", "stg_zendesk_tickets_audits"], "unique_id": "model.houm.stg_zendesk_tickets_audits", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/zendesk/stg_zendesk_tickets_audits.sql", "original_file_path": "models/staging/zendesk/stg_zendesk_tickets_audits.sql", "name": "stg_zendesk_tickets_audits", "alias": "stg_zendesk_tickets_audits", "checksum": {"name": "sha256", "checksum": "a7ce1ebcf629ee50696edab50e4a4dd1a7c4da7cd13c5df764c71bbc152b7d73"}, "tags": ["dw", "zendesk"], "refs": [], "sources": [["airbyte_zendesk", "ticket_audits"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/zendesk/stg_zendesk_tickets_audits.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_staging", "tags": ["dw", "zendesk"]}, "created_at": 1650431901.489645, "compiled_sql": "select ta.id\n\t\t,ta.created_at \n\t\t,ta.ticket_id \n\t\t,ta.author_id \n\t\t--,ta.via \n\t\t--,ta.events \n\t\t,ta._airbyte_ticket_audits_hashid\nFROM\n    \"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits\" ta", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_staging\".\"stg_zendesk_tickets_audits\""}, "model.houm.stg_properties": {"raw_sql": "select * \nfrom {{ source('historical', 'historical_properties') }}\nwhere audit_end_dt is null  and audit_action != 'D'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.historical.historical_properties"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_staging", "database": null, "tags": ["dw"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_staging", "fqn": ["houm", "staging", "arriendoasegurado", "stg_properties"], "unique_id": "model.houm.stg_properties", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/arriendoasegurado/stg_properties.sql", "original_file_path": "models/staging/arriendoasegurado/stg_properties.sql", "name": "stg_properties", "alias": "stg_properties", "checksum": {"name": "sha256", "checksum": "fe40193a7328c578b6bac111e59286fc13bb54bf4d5a8ec69b9c9b12f3446496"}, "tags": ["dw"], "refs": [], "sources": [["historical", "historical_properties"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/arriendoasegurado/stg_properties.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_staging", "tags": "dw"}, "created_at": 1650432061.4284515, "compiled_sql": "select * \nfrom \"houmdw_prod\".\"historical\".\"historical_properties\"\nwhere audit_end_dt is null  and audit_action != 'D'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_staging\".\"stg_properties\""}, "model.houm.stg_employees": {"raw_sql": "SELECT\n    *,\n    id + 10000 AS dwh_employee_id,\n    'Chile' AS country_at,\n    person_id + 10000 AS dwh_person_id\nFROM\n    {{ source(\n        'staging_buk',\n        'employees_chile'\n    ) }}\nUNION ALL\nSELECT\n    *,\n    id + 20000 AS dwh_employee_id,\n    'Colombia' AS country_at,\n    person_id + 20000 AS dwh_person_id\nFROM\n    {{ source(\n        'staging_buk',\n        'employees_colombia'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.staging_buk.employees_colombia", "source.houm.staging_buk.employees_chile"]}, "config": {"enabled": true, "alias": null, "schema": "staging_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "staging_finance", "fqn": ["houm", "staging", "buk", "stg_employees"], "unique_id": "model.houm.stg_employees", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/buk/stg_employees.sql", "original_file_path": "models/staging/buk/stg_employees.sql", "name": "stg_employees", "alias": "stg_employees", "checksum": {"name": "sha256", "checksum": "ceb501d6e299e9bb3392965a61e048b9074173deecc995fc91c347a2b1fc68f9"}, "tags": [], "refs": [], "sources": [["staging_buk", "employees_colombia"], ["staging_buk", "employees_chile"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/buk/stg_employees.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging_finance"}, "created_at": 1650432061.6687696, "compiled_sql": "SELECT\n    *,\n    id + 10000 AS dwh_employee_id,\n    'Chile' AS country_at,\n    person_id + 10000 AS dwh_person_id\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"employees_chile\"\nUNION ALL\nSELECT\n    *,\n    id + 20000 AS dwh_employee_id,\n    'Colombia' AS country_at,\n    person_id + 20000 AS dwh_person_id\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"employees_colombia\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"staging_finance\".\"stg_employees\""}, "model.houm.stg_roles": {"raw_sql": "SELECT\n    *,\n    id + 10000 AS dwh_id,\n    'Chile' AS country\nFROM\n    {{ source(\n        'staging_buk',\n        'roles_chile'\n    ) }}\nUNION ALL\nSELECT\n    *,\n    id + 20000 AS dwh_id,\n    'Colombia' AS country\nFROM\n    {{ source(\n        'staging_buk',\n        'roles_colombia'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.staging_buk.roles_chile", "source.houm.staging_buk.roles_colombia"]}, "config": {"enabled": true, "alias": null, "schema": "staging_finance", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "staging_finance", "fqn": ["houm", "staging", "buk", "stg_roles"], "unique_id": "model.houm.stg_roles", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/buk/stg_roles.sql", "original_file_path": "models/staging/buk/stg_roles.sql", "name": "stg_roles", "alias": "stg_roles", "checksum": {"name": "sha256", "checksum": "4a2edbed91f7133000879ebb9db1e554f57bf765b00fa8c40b2202858a0b45a6"}, "tags": [], "refs": [], "sources": [["staging_buk", "roles_chile"], ["staging_buk", "roles_colombia"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/buk/stg_roles.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging_finance"}, "created_at": 1650432061.7166002, "compiled_sql": "SELECT\n    *,\n    id + 10000 AS dwh_id,\n    'Chile' AS country\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"roles_chile\"\nUNION ALL\nSELECT\n    *,\n    id + 20000 AS dwh_id,\n    'Colombia' AS country\nFROM\n    \"houmdw_prod\".\"staging_buk\".\"roles_colombia\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"staging_finance\".\"stg_roles\""}, "model.houm.stg_property_salesdetails": {"raw_sql": "select * \nfrom {{ source('historical', 'historical_properties_salesdetails') }}\nwhere audit_end_dt is null  and audit_action != 'D'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.historical.historical_properties_salesdetails"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_staging", "database": null, "tags": ["dw"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_staging", "fqn": ["houm", "staging", "arriendoasegurado", "stg_property_salesdetails"], "unique_id": "model.houm.stg_property_salesdetails", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/arriendoasegurado/stg_property_salesdetails.sql", "original_file_path": "models/staging/arriendoasegurado/stg_property_salesdetails.sql", "name": "stg_property_salesdetails", "alias": "stg_property_salesdetails", "checksum": {"name": "sha256", "checksum": "636a1a6c7bedc3b0e4dd06461038ee1c61085fd391bd4d51536a151e2af1c3dd"}, "tags": ["dw"], "refs": [], "sources": [["historical", "historical_properties_salesdetails"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/arriendoasegurado/stg_property_salesdetails.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_staging", "tags": "dw"}, "created_at": 1650432061.7541635, "compiled_sql": "select * \nfrom \"houmdw_prod\".\"historical\".\"historical_properties_salesdetails\"\nwhere audit_end_dt is null  and audit_action != 'D'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_staging\".\"stg_property_salesdetails\""}, "model.houm.stg_propertydetails": {"raw_sql": "select * \nfrom {{ source('historical', 'historical_arriendoasegurado_propertydetails') }}\nwhere audit_end_dt is null and audit_action != 'D'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.houm.historical.historical_arriendoasegurado_propertydetails"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_staging", "database": null, "tags": ["dw"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "houmdw_prod", "schema": "dbt_staging", "fqn": ["houm", "staging", "arriendoasegurado", "stg_propertydetails"], "unique_id": "model.houm.stg_propertydetails", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/arriendoasegurado/stg_propertydetails.sql", "original_file_path": "models/staging/arriendoasegurado/stg_propertydetails.sql", "name": "stg_propertydetails", "alias": "stg_propertydetails", "checksum": {"name": "sha256", "checksum": "f59624fa95bc3f09ced32d20b44ce88470de60bcd821957aaaad2447caed3921"}, "tags": ["dw"], "refs": [], "sources": [["historical", "historical_arriendoasegurado_propertydetails"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/arriendoasegurado/stg_propertydetails.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_staging", "tags": "dw"}, "created_at": 1650432061.7951343, "compiled_sql": "select * \nfrom \"houmdw_prod\".\"historical\".\"historical_arriendoasegurado_propertydetails\"\nwhere audit_end_dt is null and audit_action != 'D'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"houmdw_prod\".\"dbt_staging\".\"stg_propertydetails\""}, "test.houm.unique_stg_zendesk_users_id.e79d686872": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_zendesk_users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.houm.stg_zendesk_users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "houmdw_prod", "schema": "dbt_test__audit", "fqn": ["houm", "staging", "unique_stg_zendesk_users_id"], "unique_id": "test.houm.unique_stg_zendesk_users_id.e79d686872", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "unique_stg_zendesk_users_id.sql", "original_file_path": "models/staging/schema.yml", "name": "unique_stg_zendesk_users_id", "alias": "unique_stg_zendesk_users_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_zendesk_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/schema.yml/unique_stg_zendesk_users_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650432062.0859792, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"houmdw_prod\".\"dbt_staging\".\"stg_zendesk_users\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.stg_zendesk_users"}, "test.houm.not_null_stg_zendesk_users_id.52cc258f65": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_zendesk_users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.houm.stg_zendesk_users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "houmdw_prod", "schema": "dbt_test__audit", "fqn": ["houm", "staging", "not_null_stg_zendesk_users_id"], "unique_id": "test.houm.not_null_stg_zendesk_users_id.52cc258f65", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "not_null_stg_zendesk_users_id.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg_zendesk_users_id", "alias": "not_null_stg_zendesk_users_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_zendesk_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/houm/models/staging/schema.yml/not_null_stg_zendesk_users_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1650432062.122481, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"houmdw_prod\".\"dbt_staging\".\"stg_zendesk_users\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.stg_zendesk_users"}}, "sources": {"source.houm.public.dim_polygons": {"fqn": ["houm", "dims", "public", "dim_polygons"], "database": "houmdw_prod", "schema": "public", "unique_id": "source.houm.public.dim_polygons", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/dims/sources.yml", "original_file_path": "models/dims/sources.yml", "name": "dim_polygons", "source_name": "public", "source_description": "", "loader": "", "identifier": "dim_polygons", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"public\".\"dim_polygons\"", "created_at": 1650421552.1907852}, "source.houm.historical.historical_scheduler_macrozone": {"fqn": ["houm", "dims", "historical", "historical_scheduler_macrozone"], "database": "houmdw_prod", "schema": "historical", "unique_id": "source.houm.historical.historical_scheduler_macrozone", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/dims/sources.yml", "original_file_path": "models/dims/sources.yml", "name": "historical_scheduler_macrozone", "source_name": "historical", "source_description": "", "loader": "", "identifier": "historical_scheduler_macrozone", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"historical\".\"historical_scheduler_macrozone\"", "created_at": 1650421552.192982}, "source.houm.historical.historical_arriendoasegurado_propertydetails": {"fqn": ["houm", "staging", "historical", "historical_arriendoasegurado_propertydetails"], "database": "houmdw_prod", "schema": "historical", "unique_id": "source.houm.historical.historical_arriendoasegurado_propertydetails", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "historical_arriendoasegurado_propertydetails", "source_name": "historical", "source_description": "", "loader": "", "identifier": "historical_arriendoasegurado_propertydetails", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"historical\".\"historical_arriendoasegurado_propertydetails\"", "created_at": 1650421552.1942863}, "source.houm.historical.historical_properties": {"fqn": ["houm", "staging", "historical", "historical_properties"], "database": "houmdw_prod", "schema": "historical", "unique_id": "source.houm.historical.historical_properties", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "historical_properties", "source_name": "historical", "source_description": "", "loader": "", "identifier": "historical_properties", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"historical\".\"historical_properties\"", "created_at": 1650421552.195393}, "source.houm.historical.historical_properties_salesdetails": {"fqn": ["houm", "staging", "historical", "historical_properties_salesdetails"], "database": "houmdw_prod", "schema": "historical", "unique_id": "source.houm.historical.historical_properties_salesdetails", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "historical_properties_salesdetails", "source_name": "historical", "source_description": "", "loader": "", "identifier": "historical_properties_salesdetails", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"historical\".\"historical_properties_salesdetails\"", "created_at": 1650421552.1970103}, "source.houm.historical.historical_arriendoasegurado_homecheckerdetails": {"fqn": ["houm", "staging", "historical", "historical_arriendoasegurado_homecheckerdetails"], "database": "houmdw_prod", "schema": "historical", "unique_id": "source.houm.historical.historical_arriendoasegurado_homecheckerdetails", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "historical_arriendoasegurado_homecheckerdetails", "source_name": "historical", "source_description": "", "loader": "", "identifier": "historical_arriendoasegurado_homecheckerdetails", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"historical\".\"historical_arriendoasegurado_homecheckerdetails\"", "created_at": 1650421552.199036}, "source.houm.historical.historical_users": {"fqn": ["houm", "staging", "historical", "historical_users"], "database": "houmdw_prod", "schema": "historical", "unique_id": "source.houm.historical.historical_users", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "historical_users", "source_name": "historical", "source_description": "", "loader": "", "identifier": "historical_users", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"historical\".\"historical_users\"", "created_at": 1650421552.2004611}, "source.houm.raw_stage.scheduler_macrozone": {"fqn": ["houm", "staging", "raw_stage", "scheduler_macrozone"], "database": "houmdw_prod", "schema": "raw_stage", "unique_id": "source.houm.raw_stage.scheduler_macrozone", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "scheduler_macrozone", "source_name": "raw_stage", "source_description": "", "loader": "", "identifier": "scheduler_macrozone", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"raw_stage\".\"scheduler_macrozone\"", "created_at": 1650421552.201563}, "source.houm.raw_stage.properties_location": {"fqn": ["houm", "staging", "raw_stage", "properties_location"], "database": "houmdw_prod", "schema": "raw_stage", "unique_id": "source.houm.raw_stage.properties_location", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "properties_location", "source_name": "raw_stage", "source_description": "", "loader": "", "identifier": "properties_location", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"raw_stage\".\"properties_location\"", "created_at": 1650421552.2026014}, "source.houm.staging_buk.employees_chile": {"fqn": ["houm", "staging", "staging_buk", "employees_chile"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.employees_chile", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "employees_chile", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "employees_chile", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"employees_chile\"", "created_at": 1650421552.2036688}, "source.houm.staging_buk.employees_colombia": {"fqn": ["houm", "staging", "staging_buk", "employees_colombia"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.employees_colombia", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "employees_colombia", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "employees_colombia", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"employees_colombia\"", "created_at": 1650421552.204658}, "source.houm.staging_buk.roles_chile": {"fqn": ["houm", "staging", "staging_buk", "roles_chile"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.roles_chile", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "roles_chile", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "roles_chile", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"roles_chile\"", "created_at": 1650421552.2056224}, "source.houm.staging_buk.roles_colombia": {"fqn": ["houm", "staging", "staging_buk", "roles_colombia"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.roles_colombia", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "roles_colombia", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "roles_colombia", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"roles_colombia\"", "created_at": 1650421552.2066426}, "source.houm.staging_buk.accounting_chile": {"fqn": ["houm", "staging", "staging_buk", "accounting_chile"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.accounting_chile", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "accounting_chile", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "accounting_chile", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"accounting_chile\"", "created_at": 1650421552.2076893}, "source.houm.staging_buk.accounting_colombia": {"fqn": ["houm", "staging", "staging_buk", "accounting_colombia"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.accounting_colombia", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "accounting_colombia", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "accounting_colombia", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"accounting_colombia\"", "created_at": 1650421552.2116067}, "source.houm.staging_buk.areas_chile": {"fqn": ["houm", "staging", "staging_buk", "areas_chile"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.areas_chile", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "areas_chile", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "areas_chile", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"areas_chile\"", "created_at": 1650421552.2127643}, "source.houm.staging_buk.areas_colombia": {"fqn": ["houm", "staging", "staging_buk", "areas_colombia"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.areas_colombia", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "areas_colombia", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "areas_colombia", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"areas_colombia\"", "created_at": 1650421552.2137842}, "source.houm.staging_buk.companies_chile": {"fqn": ["houm", "staging", "staging_buk", "companies_chile"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.companies_chile", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "companies_chile", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "companies_chile", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"companies_chile\"", "created_at": 1650421552.2149298}, "source.houm.staging_buk.companies_colombia": {"fqn": ["houm", "staging", "staging_buk", "companies_colombia"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.companies_colombia", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "companies_colombia", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "companies_colombia", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"companies_colombia\"", "created_at": 1650421552.2160518}, "source.houm.staging_buk.departments_chile": {"fqn": ["houm", "staging", "staging_buk", "departments_chile"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.departments_chile", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "departments_chile", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "departments_chile", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"departments_chile\"", "created_at": 1650421552.2170334}, "source.houm.staging_buk.departments_colombia": {"fqn": ["houm", "staging", "staging_buk", "departments_colombia"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.departments_colombia", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "departments_colombia", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "departments_colombia", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"departments_colombia\"", "created_at": 1650421552.2180526}, "source.houm.staging_buk.jobs_chile": {"fqn": ["houm", "staging", "staging_buk", "jobs_chile"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.jobs_chile", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "jobs_chile", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "jobs_chile", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"jobs_chile\"", "created_at": 1650421552.2190893}, "source.houm.staging_buk.jobs_colombia": {"fqn": ["houm", "staging", "staging_buk", "jobs_colombia"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.jobs_colombia", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "jobs_colombia", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "jobs_colombia", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"jobs_colombia\"", "created_at": 1650421552.2201273}, "source.houm.staging_buk.payrolls_chile": {"fqn": ["houm", "staging", "staging_buk", "payrolls_chile"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.payrolls_chile", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "payrolls_chile", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "payrolls_chile", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"payrolls_chile\"", "created_at": 1650421552.2211397}, "source.houm.staging_buk.payrolls_colombia": {"fqn": ["houm", "staging", "staging_buk", "payrolls_colombia"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.payrolls_colombia", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "payrolls_colombia", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "payrolls_colombia", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"payrolls_colombia\"", "created_at": 1650421552.2221699}, "source.houm.staging_buk.line_settlements_chile": {"fqn": ["houm", "staging", "staging_buk", "line_settlements_chile"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.line_settlements_chile", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "line_settlements_chile", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "line_settlements_chile", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"line_settlements_chile\"", "created_at": 1650421552.2234926}, "source.houm.staging_buk.line_settlements_colombia": {"fqn": ["houm", "staging", "staging_buk", "line_settlements_colombia"], "database": "houmdw_prod", "schema": "staging_buk", "unique_id": "source.houm.staging_buk.line_settlements_colombia", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "line_settlements_colombia", "source_name": "staging_buk", "source_description": "", "loader": "", "identifier": "line_settlements_colombia", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"staging_buk\".\"line_settlements_colombia\"", "created_at": 1650421552.2245762}, "source.houm.zendesk.users": {"fqn": ["houm", "staging", "zendesk", "users"], "database": "houmdw_prod", "schema": "zendesk", "unique_id": "source.houm.zendesk.users", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "users", "source_name": "zendesk", "source_description": "", "loader": "", "identifier": "users", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"zendesk\".\"users\"", "created_at": 1650421552.229017}, "source.houm.airbyte_zendesk.tickets": {"fqn": ["houm", "staging", "airbyte_zendesk", "tickets"], "database": "houmdw_prod", "schema": "airbyte_zendesk", "unique_id": "source.houm.airbyte_zendesk.tickets", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "tickets", "source_name": "airbyte_zendesk", "source_description": "", "loader": "", "identifier": "tickets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"airbyte_zendesk\".\"tickets\"", "created_at": 1650430557.800218}, "source.houm.airbyte_zendesk.ticket_audits": {"fqn": ["houm", "staging", "airbyte_zendesk", "ticket_audits"], "database": "houmdw_prod", "schema": "airbyte_zendesk", "unique_id": "source.houm.airbyte_zendesk.ticket_audits", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "ticket_audits", "source_name": "airbyte_zendesk", "source_description": "", "loader": "", "identifier": "ticket_audits", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits\"", "created_at": 1650430557.8017743}, "source.houm.airbyte_zendesk.ticket_audits_events": {"fqn": ["houm", "staging", "airbyte_zendesk", "ticket_audits_events"], "database": "houmdw_prod", "schema": "airbyte_zendesk", "unique_id": "source.houm.airbyte_zendesk.ticket_audits_events", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "ticket_audits_events", "source_name": "airbyte_zendesk", "source_description": "", "loader": "", "identifier": "ticket_audits_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits_events\"", "created_at": 1650430557.8031201}, "source.houm.airbyte_zendesk.ticket_audits_via": {"fqn": ["houm", "staging", "airbyte_zendesk", "ticket_audits_via"], "database": "houmdw_prod", "schema": "airbyte_zendesk", "unique_id": "source.houm.airbyte_zendesk.ticket_audits_via", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "ticket_audits_via", "source_name": "airbyte_zendesk", "source_description": "", "loader": "", "identifier": "ticket_audits_via", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits_via\"", "created_at": 1650430557.804233}, "source.houm.airbyte_zendesk.ticket_audits_via_source": {"fqn": ["houm", "staging", "airbyte_zendesk", "ticket_audits_via_source"], "database": "houmdw_prod", "schema": "airbyte_zendesk", "unique_id": "source.houm.airbyte_zendesk.ticket_audits_via_source", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "ticket_audits_via_source", "source_name": "airbyte_zendesk", "source_description": "", "loader": "", "identifier": "ticket_audits_via_source", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits_via_source\"", "created_at": 1650430557.805771}, "source.houm.airbyte_zendesk.ticket_audits_via_source_from": {"fqn": ["houm", "staging", "airbyte_zendesk", "ticket_audits_via_source_from"], "database": "houmdw_prod", "schema": "airbyte_zendesk", "unique_id": "source.houm.airbyte_zendesk.ticket_audits_via_source_from", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "ticket_audits_via_source_from", "source_name": "airbyte_zendesk", "source_description": "", "loader": "", "identifier": "ticket_audits_via_source_from", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits_via_source_from\"", "created_at": 1650430557.8079505}, "source.houm.airbyte_zendesk.ticket_audits_via_source_to": {"fqn": ["houm", "staging", "airbyte_zendesk", "ticket_audits_via_source_to"], "database": "houmdw_prod", "schema": "airbyte_zendesk", "unique_id": "source.houm.airbyte_zendesk.ticket_audits_via_source_to", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "ticket_audits_via_source_to", "source_name": "airbyte_zendesk", "source_description": "", "loader": "", "identifier": "ticket_audits_via_source_to", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"airbyte_zendesk\".\"ticket_audits_via_source_to\"", "created_at": 1650430557.8105066}, "source.houm.airbyte_zendesk.ticket_metrics": {"fqn": ["houm", "staging", "airbyte_zendesk", "ticket_metrics"], "database": "houmdw_prod", "schema": "airbyte_zendesk", "unique_id": "source.houm.airbyte_zendesk.ticket_metrics", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "ticket_metrics", "source_name": "airbyte_zendesk", "source_description": "", "loader": "", "identifier": "ticket_metrics", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"houmdw_prod\".\"airbyte_zendesk\".\"ticket_metrics\"", "created_at": 1650430557.8118658}}, "macros": {"macro.houm.generate_schema_name": {"unique_id": "macro.houm.generate_schema_name", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n\n    {%- if target.name[-3:] == 'dev' -%}\n\n        {{ target.schema }}_{{ custom_schema_name | trim }}\n\n    {%- elif target.schema[:9] == 'dbt_cloud' -%}\n\n        {{ target.schema }}_{{ custom_schema_name | trim }}\n\n    {%- elif custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.4452033}, "macro.dbt_redshift.redshift__get_base_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_base_catalog", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_base_catalog", "macro_sql": "{% macro redshift__get_base_catalog(information_schema, schemas) -%}\n  {%- call statement('base_catalog', fetch_result=True) -%}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    with late_binding as (\n      select\n        '{{ database }}'::varchar as table_database,\n        table_schema,\n        table_name,\n        'LATE BINDING VIEW'::varchar as table_type,\n        null::text as table_comment,\n\n        column_name,\n        column_index,\n        column_type,\n        null::text as column_comment\n      from pg_get_late_binding_view_cols()\n        cols(table_schema name, table_name name, column_name name,\n             column_type varchar,\n             column_index int)\n        order by \"column_index\"\n    ),\n\n    early_binding as (\n        select\n            '{{ database }}'::varchar as table_database,\n            sch.nspname as table_schema,\n            tbl.relname as table_name,\n            case tbl.relkind\n                when 'v' then 'VIEW'\n                else 'BASE TABLE'\n            end as table_type,\n            tbl_desc.description as table_comment,\n            col.attname as column_name,\n            col.attnum as column_index,\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n            col_desc.description as column_comment\n\n        from pg_catalog.pg_namespace sch\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n        where (\n            {%- for schema in schemas -%}\n              upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n            and tbl.relkind in ('r', 'v', 'f', 'p')\n            and col.attnum > 0\n            and not col.attisdropped\n    ),\n\n    table_owners as (\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            tablename as table_name,\n            tableowner as table_owner\n\n        from pg_tables\n\n        union all\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            viewname as table_name,\n            viewowner as table_owner\n\n        from pg_views\n\n    ),\n\n    unioned as (\n\n        select *\n        from early_binding\n\n        union all\n\n        select *\n        from late_binding\n\n    )\n\n    select *,\n        table_database || '.' || table_schema || '.' || table_name as table_id\n\n    from unioned\n    join table_owners using (table_database, table_schema, table_name)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n\n    order by \"column_index\"\n  {%- endcall -%}\n\n  {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.5506968}, "macro.dbt_redshift.redshift__get_extended_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_extended_catalog", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_extended_catalog", "macro_sql": "{% macro redshift__get_extended_catalog(schemas) %}\n  {%- call statement('extended_catalog', fetch_result=True) -%}\n\n    select\n        \"database\" || '.' || \"schema\" || '.' || \"table\" as table_id,\n\n        'Encoded'::text as \"stats:encoded:label\",\n        encoded as \"stats:encoded:value\",\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\n        true as \"stats:encoded:include\",\n\n        'Dist Style' as \"stats:diststyle:label\",\n        diststyle as \"stats:diststyle:value\",\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\n        true as \"stats:diststyle:include\",\n\n        'Sort Key 1' as \"stats:sortkey1:label\",\n        -- handle 0xFF byte in response for interleaved sort styles\n        case\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\n            else sortkey1\n        end as \"stats:sortkey1:value\",\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\n\n        'Max Varchar' as \"stats:max_varchar:label\",\n        max_varchar as \"stats:max_varchar:value\",\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\n        true as \"stats:max_varchar:include\",\n\n        -- exclude this, as the data is strangely returned with null-byte characters\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\n        false as \"stats:sortkey1_enc:include\",\n\n        '# Sort Keys' as \"stats:sortkey_num:label\",\n        sortkey_num as \"stats:sortkey_num:value\",\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\n\n        'Approximate Size' as \"stats:size:label\",\n        size * 1000000 as \"stats:size:value\",\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\n        true as \"stats:size:include\",\n\n        'Disk Utilization' as \"stats:pct_used:label\",\n        pct_used / 100.0 as \"stats:pct_used:value\",\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\n        true as \"stats:pct_used:include\",\n\n        'Unsorted %' as \"stats:unsorted:label\",\n        unsorted / 100.0 as \"stats:unsorted:value\",\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\n        (unsorted is not null) as \"stats:unsorted:include\",\n\n        'Stats Off' as \"stats:stats_off:label\",\n        stats_off as \"stats:stats_off:value\",\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\n        true as \"stats:stats_off:include\",\n\n        'Approximate Row Count' as \"stats:rows:label\",\n        tbl_rows as \"stats:rows:value\",\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\n        true as \"stats:rows:include\",\n\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\n\n        'Skew Rows' as \"stats:skew_rows:label\",\n        skew_rows as \"stats:skew_rows:value\",\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\n        (skew_rows is not null) as \"stats:skew_rows:include\"\n\n    from svv_table_info\n    where (\n        {%- for schema in schemas -%}\n          upper(schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n  {%- endcall -%}\n\n  {{ return(load_result('extended_catalog').table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.564682}, "macro.dbt_redshift.redshift__can_select_from": {"unique_id": "macro.dbt_redshift.redshift__can_select_from", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__can_select_from", "macro_sql": "{% macro redshift__can_select_from(table_name) %}\n\n  {%- call statement('has_table_privilege', fetch_result=True) -%}\n\n    select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\n\n  {%- endcall -%}\n\n  {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\n  {{ return(can_select) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.5747128}, "macro.dbt_redshift.redshift__no_svv_table_info_warning": {"unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__no_svv_table_info_warning", "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\n\n    {% set msg %}\n\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\n\n    {% endset %}\n\n    {{ log(msg, info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.5807698}, "macro.dbt_redshift.redshift__get_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_catalog", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_catalog", "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = redshift__get_base_catalog(information_schema, schemas) %}\n\n    {% set select_extended =  redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = redshift__get_extended_catalog(schemas) %}\n        {% set catalog = catalog.join(extended_catalog, 'table_id') %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog.exclude(['table_id'])) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_base_catalog", "macro.dbt_redshift.redshift__can_select_from", "macro.dbt_redshift.redshift__get_extended_catalog", "macro.dbt_redshift.redshift__no_svv_table_info_warning"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.594551}, "macro.dbt_redshift.dist": {"unique_id": "macro.dbt_redshift.dist", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dist", "macro_sql": "{% macro dist(dist) %}\n  {%- if dist is not none -%}\n      {%- set dist = dist.strip().lower() -%}\n\n      {%- if dist in ['all', 'even'] -%}\n        diststyle {{ dist }}\n      {%- elif dist == \"auto\" -%}\n      {%- else -%}\n        diststyle key distkey ({{ dist }})\n      {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.810964}, "macro.dbt_redshift.sort": {"unique_id": "macro.dbt_redshift.sort", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "sort", "macro_sql": "{% macro sort(sort_type, sort) %}\n  {%- if sort is not none %}\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\n      {%- if sort is string -%}\n        {%- set sort = [sort] -%}\n      {%- endif -%}\n      {%- for item in sort -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.8290606}, "macro.dbt_redshift.redshift__create_table_as": {"unique_id": "macro.dbt_redshift.redshift__create_table_as", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_table_as", "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\n\n  {%- set _dist = config.get('dist') -%}\n  {%- set _sort_type = config.get(\n          'sort_type',\n          validator=validation.any['compound', 'interleaved']) -%}\n  {%- set _sort = config.get(\n          'sort',\n          validator=validation.any[list, basestring]) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- set backup = config.get('backup') -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n    {% if backup == false -%}backup no{%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.dist", "macro.dbt_redshift.sort"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.8671737}, "macro.dbt_redshift.redshift__create_view_as": {"unique_id": "macro.dbt_redshift.redshift__create_view_as", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_view_as", "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation }} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.880678}, "macro.dbt_redshift.redshift__create_schema": {"unique_id": "macro.dbt_redshift.redshift__create_schema", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_schema", "macro_sql": "{% macro redshift__create_schema(relation) -%}\n  {{ postgres__create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.8835185}, "macro.dbt_redshift.redshift__drop_schema": {"unique_id": "macro.dbt_redshift.redshift__drop_schema", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__drop_schema", "macro_sql": "{% macro redshift__drop_schema(relation) -%}\n  {{ postgres__drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.8861852}, "macro.dbt_redshift.redshift__get_columns_in_relation": {"unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__get_columns_in_relation", "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with bound_views as (\n        select\n          ordinal_position,\n          table_schema,\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n        from information_schema.\"columns\"\n        where table_name = '{{ relation.identifier }}'\n    ),\n\n    unbound_views as (\n      select\n        ordinal_position,\n        view_schema,\n        col_name,\n        case\n          when col_type ilike 'character varying%' then\n            'character varying'\n          when col_type ilike 'numeric%' then 'numeric'\n          else col_type\n        end as col_type,\n        case\n          when col_type like 'character%'\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n\n      from pg_get_late_binding_view_cols()\n      cols(view_schema name, view_name name, col_name name,\n           col_type varchar, ordinal_position int)\n      where view_name = '{{ relation.identifier }}'\n    ),\n\n    external_views as (\n      select\n        columnnum,\n        schemaname,\n        columnname,\n        case\n          when external_type ilike 'character varying%' or external_type ilike 'varchar%'\n          then 'character varying'\n          when external_type ilike 'numeric%' then 'numeric'\n          else external_type\n        end as external_type,\n        case\n          when external_type like 'character%' or external_type like 'varchar%'\n          then nullif(\n            REGEXP_SUBSTR(external_type, '[0-9]+'),\n            '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n      from\n        pg_catalog.svv_external_columns\n      where\n        schemaname = '{{ relation.schema }}'\n        and tablename = '{{ relation.identifier }}'\n\n    ),\n\n    unioned as (\n      select * from bound_views\n      union all\n      select * from unbound_views\n      union all\n      select * from external_views\n    )\n\n    select\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n    from unioned\n    {% if relation.schema %}\n    where table_schema = '{{ relation.schema }}'\n    {% endif %}\n    order by ordinal_position\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.901531}, "macro.dbt_redshift.redshift__list_relations_without_caching": {"unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n  {{ return(postgres__list_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9048846}, "macro.dbt_redshift.redshift__information_schema_name": {"unique_id": "macro.dbt_redshift.redshift__information_schema_name", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__information_schema_name", "macro_sql": "{% macro redshift__information_schema_name(database) -%}\n  {{ return(postgres__information_schema_name(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9078872}, "macro.dbt_redshift.redshift__list_schemas": {"unique_id": "macro.dbt_redshift.redshift__list_schemas", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_schemas", "macro_sql": "{% macro redshift__list_schemas(database) -%}\n  {{ return(postgres__list_schemas(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9108126}, "macro.dbt_redshift.redshift__check_schema_exists": {"unique_id": "macro.dbt_redshift.redshift__check_schema_exists", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__check_schema_exists", "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9141126}, "macro.dbt_redshift.redshift__current_timestamp": {"unique_id": "macro.dbt_redshift.redshift__current_timestamp", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\n  getdate()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9157379}, "macro.dbt_redshift.redshift__snapshot_get_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_get_time", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_get_time", "macro_sql": "{% macro redshift__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9187171}, "macro.dbt_redshift.redshift__snapshot_string_as_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_string_as_time", "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9235773}, "macro.dbt_redshift.redshift__make_temp_relation": {"unique_id": "macro.dbt_redshift.redshift__make_temp_relation", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__make_temp_relation", "macro_sql": "{% macro redshift__make_temp_relation(base_relation, suffix) %}\n    {% do return(postgres__make_temp_relation(base_relation, suffix)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9277651}, "macro.dbt_redshift.redshift__persist_docs": {"unique_id": "macro.dbt_redshift.redshift__persist_docs", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__persist_docs", "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {# Override: do not set column comments for LBVs #}\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9426615}, "macro.dbt_redshift.redshift__alter_relation_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_comment", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_comment", "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\n  {% do return(postgres__alter_relation_comment(relation, comment)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.947458}, "macro.dbt_redshift.redshift__alter_column_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_column_comment", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_column_comment", "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9513469}, "macro.dbt_redshift.redshift__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_add_remove_columns", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_add_remove_columns", "macro_sql": "{% macro redshift__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n  \n    {% for column in add_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} add column {{ column.name }} {{ column.data_type }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n  \n  {% if remove_columns %}\n  \n    {% for column in remove_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} drop column {{ column.name }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9707649}, "macro.dbt_redshift.redshift__get_relations": {"unique_id": "macro.dbt_redshift.redshift__get_relations", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "redshift__get_relations", "macro_sql": "{% macro redshift__get_relations () -%}\n  {{ return(dbt.postgres__get_relations()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9804614}, "macro.dbt_redshift.redshift__snapshot_merge_sql": {"unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql", "package_name": "dbt_redshift", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "redshift__snapshot_merge_sql", "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421543.9908378}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.0184026}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.1216772}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.1334193}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.140814}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.1525953}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.1709852}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.184869}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.1891646}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.1988895}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.2086647}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.2107315}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.2161767}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.2206411}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.2530367}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.2645476}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.2704446}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.2886822}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.3104012}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.338102}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.366121}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.3710644}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.3771245}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.3809369}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.3875842}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.401088}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.4450505}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.4518814}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.4558473}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.461028}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.4649112}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.4681003}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.4724367}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.4785678}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.484472}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.496216}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.5024254}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.5064363}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.5199745}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.5230014}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.5278053}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.5367534}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.5709765}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.5743537}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.580882}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.584816}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.5915718}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.596233}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.6085968}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.614058}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.6316311}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.6458936}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.6503973}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.653731}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.6575894}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.6876848}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.6930645}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.6968105}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.6999664}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.7043436}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.7093844}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.7137427}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.7207432}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.7251709}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.7286408}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.742011}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.7447693}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.7478216}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.7562282}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.7676027}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.7737582}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.7801}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.8065517}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.8114579}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.8142319}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.8171034}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.8199341}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.8336055}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.8415275}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.887812}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.9015183}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421544.9083283}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.018503}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.0821378}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.0857835}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.0901825}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.0931344}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.0953846}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.1098683}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.1131916}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.116436}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.1364384}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.176016}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.188895}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.1943746}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.2455225}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.2516196}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.2548897}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.2568264}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.261124}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.279112}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.282967}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.288159}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.29718}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.358883}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.425354}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.447533}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.453748}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.464989}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.4681625}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.4708612}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.4745905}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.4772227}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.4914427}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.4957397}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.5238204}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.5390143}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.5436006}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.548545}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.557978}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.6314259}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.6433246}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.6466546}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.6503563}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.655803}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.6838446}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.7521205}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.7638602}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.768615}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.8164728}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.8423789}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.8472042}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.8557122}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.8610241}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.8748024}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.954169}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421545.9810658}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.0066807}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.0217054}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.1231358}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.1404796}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.1600802}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.1713662}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.1839616}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.2175703}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.2436652}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.2607782}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.2660193}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.2961328}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.3097603}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.316909}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.3301418}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.3356225}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.3517513}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.3575451}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.364032}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.3771114}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.382118}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.39473}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.4104936}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.419037}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.4267426}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.4410632}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.4458325}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.45164}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650421546.4573686}}, "docs": {"houm.stg_employees": {"unique_id": "houm.stg_employees", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/buk/schema.md", "original_file_path": "models/staging/buk/schema.md", "name": "stg_employees", "block_contents": "This table contains information about all employees of Chile & Colombia working at Houm.\n\nThis information is collected by the current Human Resources System: BUK\nYou can read the docs of their API here: link"}, "houm.stg_roles": {"unique_id": "houm.stg_roles", "package_name": "houm", "root_path": "/opt/airflow/dbt", "path": "staging/buk/schema.md", "original_file_path": "models/staging/buk/schema.md", "name": "stg_roles", "block_contents": "This table contains information about employees roles at Houm.\n\nThis information is collected by the current Human Resources System: BUK"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.houm.dim_business": [], "model.houm.dim_currency": [], "model.houm.dim_dates": [], "model.houm.dim_locations": ["source.houm.public.dim_polygons"], "model.houm.dim_macrozones": ["source.houm.historical.historical_scheduler_macrozone"], "model.houm.dim_properties": ["model.houm.proc_properties", "model.houm.proc_property_salesdetails", "model.houm.proc_propertydetails"], "model.houm.cum_rentals_units": ["model.houm.rentals_units"], "model.houm.cum_sales_local_revenue": ["model.houm.sales_local_revenue"], "model.houm.cum_sales_units": ["model.houm.sales_units"], "model.houm.goals_current": ["model.houm.cum_rentals_units", "model.houm.cum_sales_local_revenue", "model.houm.cum_sales_units", "model.houm.eop_subs", "model.houm.rentals_units", "model.houm.sales_local_revenue", "model.houm.sales_units"], "model.houm.properties_published": ["model.houm.proc_properties", "model.houm.proc_property_salesdetails", "model.houm.proc_propertydetails"], "model.houm.eop_subs": [], "model.houm.rentals_units": [], "model.houm.sales_local_revenue": [], "model.houm.sales_units": [], "model.houm.proc_properties": ["model.houm.stg_properties", "model.houm.stg_users"], "model.houm.proc_property_salesdetails": ["model.houm.stg_property_salesdetails"], "model.houm.proc_propertydetails": ["model.houm.stg_propertydetails"], "model.houm.stg_homecheckerdetails": ["source.houm.historical.historical_arriendoasegurado_homecheckerdetails"], "model.houm.stg_properties_location": ["source.houm.raw_stage.properties_location"], "model.houm.stg_users": ["source.houm.historical.historical_users"], "model.houm.stg_accounting": ["source.houm.staging_buk.payrolls_chile", "source.houm.staging_buk.payrolls_colombia"], "model.houm.stg_areas": ["source.houm.staging_buk.areas_chile", "source.houm.staging_buk.areas_colombia"], "model.houm.stg_companies": ["source.houm.staging_buk.companies_chile", "source.houm.staging_buk.companies_colombia"], "model.houm.stg_departments": ["source.houm.staging_buk.departments_chile", "source.houm.staging_buk.departments_colombia"], "model.houm.stg_jobs": ["source.houm.staging_buk.jobs_chile", "source.houm.staging_buk.jobs_colombia"], "model.houm.stg_line_settlements": ["source.houm.staging_buk.line_settlements_chile", "source.houm.staging_buk.line_settlements_colombia"], "model.houm.stg_payrolls": ["source.houm.staging_buk.payrolls_chile", "source.houm.staging_buk.payrolls_colombia"], "test.houm.assert_properties_rent_prices_chile": ["model.houm.stg_properties", "model.houm.stg_propertydetails"], "operation.houm.houm-on-run-end-0": [], "operation.houm.houm-on-run-end-1": [], "operation.houm.houm-on-run-end-2": [], "operation.houm.houm-on-run-end-3": [], "operation.houm.houm-on-run-end-4": [], "operation.houm.houm-on-run-end-5": [], "operation.houm.houm-on-run-end-6": [], "operation.houm.houm-on-run-end-7": [], "operation.houm.houm-on-run-end-8": [], "operation.houm.houm-on-run-end-9": [], "operation.houm.houm-on-run-end-10": [], "operation.houm.houm-on-run-end-11": [], "operation.houm.houm-on-run-end-12": [], "operation.houm.houm-on-run-end-13": [], "operation.houm.houm-on-run-end-14": [], "operation.houm.houm-on-run-end-15": [], "operation.houm.houm-on-run-end-16": [], "operation.houm.houm-on-run-end-17": [], "test.houm.unique_dim_macrozones_macrozone.99a7937a3d": ["model.houm.dim_macrozones"], "test.houm.not_null_dim_macrozones_macrozone.5c78ef2445": ["model.houm.dim_macrozones"], "test.houm.unique_properties_published_property_id.3fc869c6e4": ["model.houm.properties_published"], "test.houm.not_null_properties_published_property_id.cfd67d7b86": ["model.houm.properties_published"], "model.houm.stg_zendesk_users": ["source.houm.zendesk.users", "source.houm.zendesk.users"], "model.houm.stg_zendesk_tickets": ["source.houm.airbyte_zendesk.tickets"], "model.houm.stg_zendesk_metrics": ["source.houm.airbyte_zendesk.ticket_metrics"], "model.houm.stg_zendesk_tickets_audits_via": ["source.houm.airbyte_zendesk.ticket_audits", "source.houm.airbyte_zendesk.ticket_audits_via", "source.houm.airbyte_zendesk.ticket_audits_via_source", "source.houm.airbyte_zendesk.ticket_audits_via_source_from", "source.houm.airbyte_zendesk.ticket_audits_via_source_to"], "model.houm.stg_zendesk_tickets_audits_events": ["source.houm.airbyte_zendesk.ticket_audits", "source.houm.airbyte_zendesk.ticket_audits_events"], "model.houm.stg_zendesk_tickets_audits": ["source.houm.airbyte_zendesk.ticket_audits"], "model.houm.stg_properties": ["source.houm.historical.historical_properties"], "model.houm.stg_employees": ["source.houm.staging_buk.employees_chile", "source.houm.staging_buk.employees_colombia"], "model.houm.stg_roles": ["source.houm.staging_buk.roles_chile", "source.houm.staging_buk.roles_colombia"], "model.houm.stg_property_salesdetails": ["source.houm.historical.historical_properties_salesdetails"], "model.houm.stg_propertydetails": ["source.houm.historical.historical_arriendoasegurado_propertydetails"], "test.houm.unique_stg_zendesk_users_id.e79d686872": ["model.houm.stg_zendesk_users"], "test.houm.not_null_stg_zendesk_users_id.52cc258f65": ["model.houm.stg_zendesk_users"], "source.houm.public.dim_polygons": [], "source.houm.historical.historical_scheduler_macrozone": [], "source.houm.historical.historical_arriendoasegurado_propertydetails": [], "source.houm.historical.historical_properties": [], "source.houm.historical.historical_properties_salesdetails": [], "source.houm.historical.historical_arriendoasegurado_homecheckerdetails": [], "source.houm.historical.historical_users": [], "source.houm.raw_stage.scheduler_macrozone": [], "source.houm.raw_stage.properties_location": [], "source.houm.staging_buk.employees_chile": [], "source.houm.staging_buk.employees_colombia": [], "source.houm.staging_buk.roles_chile": [], "source.houm.staging_buk.roles_colombia": [], "source.houm.staging_buk.accounting_chile": [], "source.houm.staging_buk.accounting_colombia": [], "source.houm.staging_buk.areas_chile": [], "source.houm.staging_buk.areas_colombia": [], "source.houm.staging_buk.companies_chile": [], "source.houm.staging_buk.companies_colombia": [], "source.houm.staging_buk.departments_chile": [], "source.houm.staging_buk.departments_colombia": [], "source.houm.staging_buk.jobs_chile": [], "source.houm.staging_buk.jobs_colombia": [], "source.houm.staging_buk.payrolls_chile": [], "source.houm.staging_buk.payrolls_colombia": [], "source.houm.staging_buk.line_settlements_chile": [], "source.houm.staging_buk.line_settlements_colombia": [], "source.houm.zendesk.users": [], "source.houm.airbyte_zendesk.tickets": [], "source.houm.airbyte_zendesk.ticket_audits": [], "source.houm.airbyte_zendesk.ticket_audits_events": [], "source.houm.airbyte_zendesk.ticket_audits_via": [], "source.houm.airbyte_zendesk.ticket_audits_via_source": [], "source.houm.airbyte_zendesk.ticket_audits_via_source_from": [], "source.houm.airbyte_zendesk.ticket_audits_via_source_to": [], "source.houm.airbyte_zendesk.ticket_metrics": []}, "child_map": {"model.houm.dim_business": [], "model.houm.dim_currency": [], "model.houm.dim_dates": [], "model.houm.dim_locations": [], "model.houm.dim_macrozones": ["test.houm.not_null_dim_macrozones_macrozone.5c78ef2445", "test.houm.unique_dim_macrozones_macrozone.99a7937a3d"], "model.houm.dim_properties": [], "model.houm.cum_rentals_units": ["model.houm.goals_current"], "model.houm.cum_sales_local_revenue": ["model.houm.goals_current"], "model.houm.cum_sales_units": ["model.houm.goals_current"], "model.houm.goals_current": [], "model.houm.properties_published": ["test.houm.not_null_properties_published_property_id.cfd67d7b86", "test.houm.unique_properties_published_property_id.3fc869c6e4"], "model.houm.eop_subs": ["model.houm.goals_current"], "model.houm.rentals_units": ["model.houm.cum_rentals_units", "model.houm.goals_current"], "model.houm.sales_local_revenue": ["model.houm.cum_sales_local_revenue", "model.houm.goals_current"], "model.houm.sales_units": ["model.houm.cum_sales_units", "model.houm.goals_current"], "model.houm.proc_properties": ["model.houm.dim_properties", "model.houm.properties_published"], "model.houm.proc_property_salesdetails": ["model.houm.dim_properties", "model.houm.properties_published"], "model.houm.proc_propertydetails": ["model.houm.dim_properties", "model.houm.properties_published"], "model.houm.stg_homecheckerdetails": [], "model.houm.stg_properties_location": [], "model.houm.stg_users": ["model.houm.proc_properties"], "model.houm.stg_accounting": [], "model.houm.stg_areas": [], "model.houm.stg_companies": [], "model.houm.stg_departments": [], "model.houm.stg_jobs": [], "model.houm.stg_line_settlements": [], "model.houm.stg_payrolls": [], "test.houm.assert_properties_rent_prices_chile": [], "operation.houm.houm-on-run-end-0": [], "operation.houm.houm-on-run-end-1": [], "operation.houm.houm-on-run-end-2": [], "operation.houm.houm-on-run-end-3": [], "operation.houm.houm-on-run-end-4": [], "operation.houm.houm-on-run-end-5": [], "operation.houm.houm-on-run-end-6": [], "operation.houm.houm-on-run-end-7": [], "operation.houm.houm-on-run-end-8": [], "operation.houm.houm-on-run-end-9": [], "operation.houm.houm-on-run-end-10": [], "operation.houm.houm-on-run-end-11": [], "operation.houm.houm-on-run-end-12": [], "operation.houm.houm-on-run-end-13": [], "operation.houm.houm-on-run-end-14": [], "operation.houm.houm-on-run-end-15": [], "operation.houm.houm-on-run-end-16": [], "operation.houm.houm-on-run-end-17": [], "test.houm.unique_dim_macrozones_macrozone.99a7937a3d": [], "test.houm.not_null_dim_macrozones_macrozone.5c78ef2445": [], "test.houm.unique_properties_published_property_id.3fc869c6e4": [], "test.houm.not_null_properties_published_property_id.cfd67d7b86": [], "model.houm.stg_zendesk_users": ["test.houm.not_null_stg_zendesk_users_id.52cc258f65", "test.houm.unique_stg_zendesk_users_id.e79d686872"], "model.houm.stg_zendesk_tickets": [], "model.houm.stg_zendesk_metrics": [], "model.houm.stg_zendesk_tickets_audits_via": [], "model.houm.stg_zendesk_tickets_audits_events": [], "model.houm.stg_zendesk_tickets_audits": [], "model.houm.stg_properties": ["model.houm.proc_properties", "test.houm.assert_properties_rent_prices_chile"], "model.houm.stg_employees": [], "model.houm.stg_roles": [], "model.houm.stg_property_salesdetails": ["model.houm.proc_property_salesdetails"], "model.houm.stg_propertydetails": ["model.houm.proc_propertydetails", "test.houm.assert_properties_rent_prices_chile"], "test.houm.unique_stg_zendesk_users_id.e79d686872": [], "test.houm.not_null_stg_zendesk_users_id.52cc258f65": [], "source.houm.public.dim_polygons": ["model.houm.dim_locations"], "source.houm.historical.historical_scheduler_macrozone": ["model.houm.dim_macrozones"], "source.houm.historical.historical_arriendoasegurado_propertydetails": ["model.houm.stg_propertydetails"], "source.houm.historical.historical_properties": ["model.houm.stg_properties"], "source.houm.historical.historical_properties_salesdetails": ["model.houm.stg_property_salesdetails"], "source.houm.historical.historical_arriendoasegurado_homecheckerdetails": ["model.houm.stg_homecheckerdetails"], "source.houm.historical.historical_users": ["model.houm.stg_users"], "source.houm.raw_stage.scheduler_macrozone": [], "source.houm.raw_stage.properties_location": ["model.houm.stg_properties_location"], "source.houm.staging_buk.employees_chile": ["model.houm.stg_employees"], "source.houm.staging_buk.employees_colombia": ["model.houm.stg_employees"], "source.houm.staging_buk.roles_chile": ["model.houm.stg_roles"], "source.houm.staging_buk.roles_colombia": ["model.houm.stg_roles"], "source.houm.staging_buk.accounting_chile": [], "source.houm.staging_buk.accounting_colombia": [], "source.houm.staging_buk.areas_chile": ["model.houm.stg_areas"], "source.houm.staging_buk.areas_colombia": ["model.houm.stg_areas"], "source.houm.staging_buk.companies_chile": ["model.houm.stg_companies"], "source.houm.staging_buk.companies_colombia": ["model.houm.stg_companies"], "source.houm.staging_buk.departments_chile": ["model.houm.stg_departments"], "source.houm.staging_buk.departments_colombia": ["model.houm.stg_departments"], "source.houm.staging_buk.jobs_chile": ["model.houm.stg_jobs"], "source.houm.staging_buk.jobs_colombia": ["model.houm.stg_jobs"], "source.houm.staging_buk.payrolls_chile": ["model.houm.stg_accounting", "model.houm.stg_payrolls"], "source.houm.staging_buk.payrolls_colombia": ["model.houm.stg_accounting", "model.houm.stg_payrolls"], "source.houm.staging_buk.line_settlements_chile": ["model.houm.stg_line_settlements"], "source.houm.staging_buk.line_settlements_colombia": ["model.houm.stg_line_settlements"], "source.houm.zendesk.users": ["model.houm.stg_zendesk_users", "model.houm.stg_zendesk_users"], "source.houm.airbyte_zendesk.tickets": ["model.houm.stg_zendesk_tickets"], "source.houm.airbyte_zendesk.ticket_audits": ["model.houm.stg_zendesk_tickets_audits", "model.houm.stg_zendesk_tickets_audits_events", "model.houm.stg_zendesk_tickets_audits_via"], "source.houm.airbyte_zendesk.ticket_audits_events": ["model.houm.stg_zendesk_tickets_audits_events"], "source.houm.airbyte_zendesk.ticket_audits_via": ["model.houm.stg_zendesk_tickets_audits_via"], "source.houm.airbyte_zendesk.ticket_audits_via_source": ["model.houm.stg_zendesk_tickets_audits_via"], "source.houm.airbyte_zendesk.ticket_audits_via_source_from": ["model.houm.stg_zendesk_tickets_audits_via"], "source.houm.airbyte_zendesk.ticket_audits_via_source_to": ["model.houm.stg_zendesk_tickets_audits_via"], "source.houm.airbyte_zendesk.ticket_metrics": ["model.houm.stg_zendesk_metrics"]}}